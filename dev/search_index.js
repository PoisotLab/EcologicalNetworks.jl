var documenterSearchIndex = {"docs":
[{"location":"random/null/#Null-models","page":"Null models","title":"Null models","text":"","category":"section"},{"location":"random/null/","page":"Null models","title":"Null models","text":"Randomization of networks is mostly used to perform null hypothesis significance testing, or to draw random realizations of a probabilistic network. There are two ways to perform networks randomization: either by shuffling interactions within the networks while enforcing some constraints (shuffle) or by drawing random samples from a probabilistic network (rand).","category":"page"},{"location":"random/null/#Draw-a-network-from-a-probabilistic-network","page":"Null models","title":"Draw a network from a probabilistic network","text":"","category":"section"},{"location":"random/null/","page":"Null models","title":"Null models","text":"rand","category":"page"},{"location":"random/null/#Base.rand","page":"Null models","title":"Base.rand","text":"rand(N::ProbabilisticNetwork)\n\nConverts a probabilistic network into a deterministic one by performing random draws. All interactions are treated as independent Bernoulli events. Note that this network is not checked for degeneracy, i.e. species can end up with no interactions.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\nrand(N::ProbabilisticNetwork, n::T) where {T<:Integer}\n\nGenerates a number of random deterministic networks based on a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\nrand(N::ProbabilisticNetwork, S::Tuple{Int64,Int64})\n\nGenerates a number of random deterministic networks based on a probabilistic network, and returns them as a matrix.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"random/null/#Generate-probabilistic-networks-from-deterministic-networks","page":"Null models","title":"Generate probabilistic networks from deterministic networks","text":"","category":"section"},{"location":"random/null/","page":"Null models","title":"Null models","text":"These functions generate a probabilistic network from a deterministic network, where the probability of every interaction is determined by the degree distribution (or connectance) of the network.","category":"page"},{"location":"random/null/","page":"Null models","title":"Null models","text":"null1\nnull2\nnull3","category":"page"},{"location":"random/null/#EcologicalNetworks.null1","page":"Null models","title":"EcologicalNetworks.null1","text":"null1(N::BinaryNetwork)\n\nGiven a network N, null1(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the connectance of N.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nFortuna, M.A., Bascompte, J., 2006. Habitat loss and the structure of plantanimal mutualistic networks. Ecol. Lett. 9, 281–286. https://doi.org/10.1111/j.1461-0248.2005.00868.x\n\n\n\n\n\n","category":"function"},{"location":"random/null/#EcologicalNetworks.null2","page":"Null models","title":"EcologicalNetworks.null2","text":"null2(N::BinaryNetwork)\n\nGiven a network N, null2(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nBascompte, J., Jordano, P., Melian, C.J., Olesen, J.M., 2003. The nested assembly of plant-animal mutualistic networks. PNAS 100, 9383–9387. https://doi.org/10.1073/pnas.1633576100\n\n\n\n\n\n","category":"function"},{"location":"random/null/#EcologicalNetworks.null3","page":"Null models","title":"EcologicalNetworks.null3","text":"null3(N::BinaryNetwork; dims::Integer=1)\n\nGiven a network N, null3(N) returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (dims=1) or to the in-degree (dims=2, number of predecessors) of each species, divided by the total number of possible predecessors/successors.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nPoisot, T., Stanko, M., Miklisová, D., Morand, S., 2013. Facultative and obligate parasite communities exhibit different network properties. Parasitology 140, 1340–1345. https://doi.org/10.1017/S0031182013000851\n\n\n\n\n\n","category":"function"},{"location":"random/null/#Random-Dot-Product-Graph-model","page":"Null models","title":"Random Dot Product Graph model","text":"","category":"section"},{"location":"random/null/","page":"Null models","title":"Null models","text":"The interaction probability in a Random Dot Product Graphs model are given by the dot product of species representations in two metric spaces of a given dimension (one describing species as consumers, one as producers – or predators and preys).","category":"page"},{"location":"random/null/","page":"Null models","title":"Null models","text":"RDPG","category":"page"},{"location":"random/null/#EcologicalNetworks.RDPG","page":"Null models","title":"EcologicalNetworks.RDPG","text":"RDPG(N::BinaryNetwork; rank::Integer=3)\n\nGiven a binary network N, RDPG(N) returns a probabilistic network with the same number of species, where every interaction happens with a probability equal to the dot product of species representation in the network N's RDPG space of rank rank.\n\nBecause the pairwise dot product obtained by the matrix multiplication of the two spaces Left * Right are not granted to be bounded between 0 and 1 (for numerical and theoric reasons), we bound the entries to be in the [0,1] range.\n\nReferences\n\nDalla Riva, G.V. and Stouffer, D.B., 2016. Exploring the evolutionary signature of food webs' backbones using functional traits. Oikos, 125(4), pp.446-456. https://doi.org/10.1111/oik.02305\n\n\n\n\n\n","category":"function"},{"location":"random/null/","page":"Null models","title":"Null models","text":"The Random Dot Product Graph spaces are computed via a truncated Singular Value Decomposition of the food web adjacency matrix.","category":"page"},{"location":"random/null/","page":"Null models","title":"Null models","text":"svd_truncated","category":"page"},{"location":"random/null/#Shuffle-interactions","page":"Null models","title":"Shuffle interactions","text":"","category":"section"},{"location":"random/null/","page":"Null models","title":"Null models","text":"shuffle!\nshuffle","category":"page"},{"location":"random/null/#Random.shuffle!","page":"Null models","title":"Random.shuffle!","text":"shuffle!(N::BinaryNetwork; constraint::Symbol=:degree)\n\nShuffles interactions inside a network (the network is modified), under the following constraint:\n\n:degree, which keeps the degree distribution intact\n:generality, which keeps the out-degree distribution intact\n:vulnerability, which keeps the in-degree distribution intact\n:fill, which moves interactions around freely\n\nThe function will take two interactions, and swap the species establishing them. By repeating the process a large enough number of times, the resulting network should be relatively random. Note that this function will conserve the degree (when appropriate under the selected constraint) of every species. Calling the function will perform a single shuffle. If you want to repeat the shuffling a large enough number of times, you can use something like:\n\n[shuffle!(n) for i in 1:10_000]\n\nIf the keyword arguments are invalid, the function will throw an ArgumentError.\n\nReferences\n\nFortuna, M.A., Stouffer, D.B., Olesen, J.M., Jordano, P., Mouillot, D., Krasnov, B.R., Poulin, R., Bascompte, J., 2010. Nestedness versus modularity in ecological networks: two sides of the same coin? Journal of Animal Ecology 78, 811–817. https://doi.org/10.1111/j.1365-2656.2010.01688.x\n\n\n\n\n\n","category":"function"},{"location":"random/null/#Random.shuffle","page":"Null models","title":"Random.shuffle","text":"shuffle(N::BinaryNetwork; constraint::Symbol=:degree)\n\nReturn a shuffled copy of the network (the original network is not modified). See shuffle! for a documentation of the keyword arguments.\n\nReferences\n\nFortuna, M.A., Stouffer, D.B., Olesen, J.M., Jordano, P., Mouillot, D., Krasnov, B.R., Poulin, R., Bascompte, J., 2010. Nestedness versus modularity in ecological networks: two sides of the same coin? Journal of Animal Ecology 78, 811–817. https://doi.org/10.1111/j.1365-2656.2010.01688.x\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"lib/internals/","page":"Internals","title":"Internals","text":"Modules = [EcologicalNetworks]\nPrivate = true\nPublic = false\nOrder = [:function]","category":"page"},{"location":"lib/internals/#Base.:!-Tuple{T} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Internals","title":"Base.:!","text":"Base.:!{T<:DeterministicNetwork}(N::T)\n\nReturns the inverse of a binary network – interactions that were false become true, and conversely.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.:+-Union{Tuple{T}, Tuple{T,T}} where T<:BipartiteQuantitativeNetwork","page":"Internals","title":"Base.:+","text":"+(n1::T, n2::T) where {T <: BipartiteQuantitativeNetwork}\n\nAdds two quantitative bipartite networks. TODO\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Tuple{Type{AbstractUnipartiteNetwork},AbstractBipartiteNetwork}","page":"Internals","title":"Base.convert","text":"convert(::Type{AbstractUnipartiteNetwork}, N::AbstractBipartiteNetwork)\n\nProjects any bipartite network in its unipartite representation. This function will call the correct type-to-type convert function depending on the type of the input network.\n\nThe type to be converted to must be AbstractUnipartiteNetwork – for example, converting a bipartite probabilistic network to a probabilistic unipartite network is not a meaningful operation.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Tuple{Type{Union{BipartiteNetwork, UnipartiteNetwork}},Union{BipartiteQuantitativeNetwork, UnipartiteQuantitativeNetwork}}","page":"Internals","title":"Base.convert","text":"convert(::Type{BinaryNetwork}, N::QuantitativeNetwork)\n\nProjects any bipartite network in its unipartite representation. This function will call the correct type-to-type convert function depending on the type of the input network.\n\nThis function does not work for probabilistic networks. The operation of generating a deterministic network from a probabilistic one is different from a simple conversion: it can be done either through random draws, or by selecting only interactions with a probability greater than 0 (N>0.0 will do this).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{NT}, Tuple{Type{BipartiteNetwork},NT}} where NT<:BipartiteQuantitativeNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{BipartiteNetwork}, N::T) where {T <: BipartiteQuantitativeNetwork}\n\nConvert a bipartite quantitative network to a bipartite binary network. This amounts to removing the quantitative information.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{BipartiteNetwork},T}} where T<:UnipartiteNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{BipartiteNetwork}, N::T) where {T <: UnipartiteNetwork}\n\nProjects a unipartite network (specifically, a BipartiteNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{BipartiteProbabilisticNetwork},T}} where T<:UnipartiteProbabilisticNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{BipartiteProbabilisticNetwork}, N::T) where {T <: UnipartiteProbabilisticNetwork}\n\nProjects a unipartite network (specifically, a BipartiteProbabilisticNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{BipartiteQuantitativeNetwork},T}} where T<:UnipartiteQuantitativeNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{BipartiteQuantitativeNetwork}, N::T) where {T <: UnipartiteQuantitativeNetwork}\n\nProjects a unipartite network (specifically, a BipartiteQuantitativeNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{UnipartiteNetwork},T}} where T<:BipartiteNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{UnipartiteNetwork}, N::T) where {T <: BipartiteNetwork}\n\nProjects a deterministic bipartite network in its unipartite representation.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{UnipartiteNetwork},T}} where T<:UnipartiteQuantitativeNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{UnipartiteNetwork}, N::T) where {T <: UnipartiteQuantitativeNetwork}\n\nConvert a unipartite quantitative network to a unipartite binary network. This amounts to removing the quantitative information.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{UnipartiteProbabilisticNetwork},T}} where T<:BipartiteProbabilisticNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{UnipartiteProbabilisticNetwork}, N::T) where {T <: BipartiteProbabilisticNetwork}\n\nProjects a probabilistic bipartite network in its unipartite representation.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.convert-Union{Tuple{T}, Tuple{Type{UnipartiteQuantitativeNetwork},T}} where T<:BipartiteQuantitativeNetwork","page":"Internals","title":"Base.convert","text":"convert(::Type{UnipartiteQuantitativeNetwork}, N::T) where {T <: BipartiteQuantitativeNetwork}\n\nProjects a quantitative bipartite network in its unipartite representation.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.copy-Tuple{AbstractEcologicalNetwork}","page":"Internals","title":"Base.copy","text":"Creates a copy of a network – this returns an object with the same type, and the same content.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractBipartiteNetwork,Array{T,1},Array{T,1}}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractBipartiteNetwork, sp1::Array{T}, sp2::Array{T})\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractBipartiteNetwork,Array{T,1},Array{T,1}}} where T<:Integer","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractBipartiteNetwork, sp1::Array{T}, sp2::Array{T})\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractBipartiteNetwork,Array{T,1},Colon}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractBipartiteNetwork, sp::Array{T}, ::Colon)\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractBipartiteNetwork,Colon,Array{T,1}}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractBipartiteNetwork, ::Colon, sp::Array{T})\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,Colon,T}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractBipartiteNetwork, ::Colon, sp::T)\n\nGets the predecessors (i.e. species that interacts with / consume) of a focal species. This returns the list of species as a Set object, in which ordering is unimportant.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,Colon,T}} where T<:Int64","page":"Internals","title":"Base.getindex","text":"getindex(N::AbstractEcologicalNetwork, ::Colon, j::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,T,Colon}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractEcologicalNetwork, sp::T, ::Colon)\n\nGets the successors (i.e. species that are interacted with / consumed) of a focal species. This returns the list of species as a Set object, in which ordering is unimportant.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,T,Colon}} where T<:Int64","page":"Internals","title":"Base.getindex","text":"getindex(N::AbstractEcologicalNetwork, i::T, ::Colon)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,T,T}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractEcologicalNetwork, s1::T, s2::T)\n\nGet the value of an interaction based on the name of the species. This is the recommended way to look for things in a network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,T,T}} where T<:Int64","page":"Internals","title":"Base.getindex","text":"getindex(N::AbstractEcologicalNetwork, i::T, j::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractEcologicalNetwork,T}} where T<:Int64","page":"Internals","title":"Base.getindex","text":"getindex(N::AbstractEcologicalNetwork, i::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.getindex-Union{Tuple{T}, Tuple{AbstractUnipartiteNetwork,Array{T,1}}} where T","page":"Internals","title":"Base.getindex","text":"getindex{T}(N::AbstractUnipartiteNetwork, sp::Array{T})\n\nInduce a unipartite network based on a list of species, all of which must be in the original network. This function takes a single argument (as opposed to two arrays, or an array and a colon) to ensure that the returned network is unipartite.\n\nThe network which is returned by this function may not have the species in the order specified by the user for performance reasons.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.intersect-Union{Tuple{T}, Tuple{T,T}} where T<:BipartiteNetwork","page":"Internals","title":"Base.intersect","text":"intersect(X::T, Y::T) where {T<:BipartiteNetwork}\n\nIntersect between two bipartite networks. The resulting network has the species and interactions common to both networks. This can result in species being disconnected, if they are found in both networks but with no operations in common.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.intersect-Union{Tuple{T}, Tuple{T,T}} where T<:UnipartiteNetwork","page":"Internals","title":"Base.intersect","text":"intersect(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nIntersect between two unipartite networks. The resulting network has the species and interactions common to both networks. This can result in species being disconnected, if they are found in both networks but with no operations in common.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.iterate-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Internals","title":"Base.iterate","text":"Base.iterate(N::T) where {T <: AbstractEcologicalNetwork}\n\nReturns the interactions in a network (this uses less memory than interactions but is a bit slower).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.iterate-Union{Tuple{T}, Tuple{T,Int64}} where T<:AbstractEcologicalNetwork","page":"Internals","title":"Base.iterate","text":"Base.iterate(N::T) where {T <: AbstractEcologicalNetwork}\n\nReturns the interactions in a network (this uses less memory than interactions but is a bit slower).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.length-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Internals","title":"Base.length","text":"Base.length(N::T) where {T <: AbstractEcologicalNetwork}\n\nThe length of a network is the number of non-zero elements in it.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.permutedims-Tuple{AbstractEcologicalNetwork}","page":"Internals","title":"Base.permutedims","text":"permutedims(N::AbstractBipartiteNetwork)\n\nTranposes the network and returns a copy\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.rand-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork},Tuple{Int64,Int64}}","page":"Internals","title":"Base.rand","text":"rand(N::ProbabilisticNetwork, S::Tuple{Int64,Int64})\n\nGenerates a number of random deterministic networks based on a probabilistic network, and returns them as a matrix.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.rand-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Internals","title":"Base.rand","text":"rand(N::ProbabilisticNetwork)\n\nConverts a probabilistic network into a deterministic one by performing random draws. All interactions are treated as independent Bernoulli events. Note that this network is not checked for degeneracy, i.e. species can end up with no interactions.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.rand-Union{Tuple{T}, Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork},T}} where T<:Integer","page":"Internals","title":"Base.rand","text":"rand(N::ProbabilisticNetwork, n::T) where {T<:Integer}\n\nGenerates a number of random deterministic networks based on a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.setdiff-Union{Tuple{T}, Tuple{T,T}} where T<:BipartiteNetwork","page":"Internals","title":"Base.setdiff","text":"setdiff(X::T, Y::T) where {T<:BipartiteNetwork}\n\nDifference between two bipartite networks. This operation is sensitive to the order of arguments, as the resulting network will have the species present in the first network (and their interactions) only.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.setdiff-Union{Tuple{T}, Tuple{T,T}} where T<:UnipartiteNetwork","page":"Internals","title":"Base.setdiff","text":"setdiff(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nDifference between two unipartite networks. This operation is sensitive to the order of arguments, as the resulting network will have the species present in the first network (and their interactions) only.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.setindex!-Union{Tuple{E}, Tuple{T}, Tuple{T,Any,E,E}} where E where T<:AbstractEcologicalNetwork","page":"Internals","title":"Base.setindex!","text":"setindex!(N::T, A::Any, i::E, j::E) where {T <: AbstractEcologicalNetwork, E}\n\nChanges the value of the interaction at the specificied position, where i and j are species names. Note that this operation changes the network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.setindex!-Union{Tuple{E}, Tuple{T}, Tuple{T,Any,E,E}} where E<:Int64 where T<:AbstractEcologicalNetwork","page":"Internals","title":"Base.setindex!","text":"setindex!(N::T, A::K, i::E, j::E) where {T <: AbstractEcologicalNetwork, K <: _interaction_type(N), E <: Int}\n\nChanges the value of the interaction at the specificied position, where i and j are species positions. Note that this operation changes the network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO,AbstractEcologicalNetwork}","page":"Internals","title":"Base.show","text":"show(io::IO, N::AbstractEcologicalNetwork)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.similar-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Internals","title":"Base.similar","text":"similar(N::T) where {T <: AbstractEcologicalNetwork}\n\nReturns a network with the same species, but an empty interaction matrix. This is useful if you want to generate a \"blank slate\" for some analyses.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.size-Tuple{AbstractEcologicalNetwork,Int64}","page":"Internals","title":"Base.size","text":"size(N::AbstractEcologicalNetwork, i::Int64)\n\nReturn the size of the adjacency matrix of an AbstractEcologicalNetwork object.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.size-Tuple{AbstractEcologicalNetwork}","page":"Internals","title":"Base.size","text":"size(N::AbstractEcologicalNetwork)\n\nReturn the size of the adjacency matrix of an AbstractEcologicalNetwork object.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.sum-Tuple{AbstractEcologicalNetwork}","page":"Internals","title":"Base.sum","text":"sum(N::AbstractEcologicalNetwork; dims=nothing)\n\nThis function will return the sum of all interactions in the network. For quantitative networks, this is the sum of interaction strengths. For binary networks, this is the number of interactions. For probabilistic networks, this is the expected number of realized interactions.\n\nOptionally, one can give the argument dims, simular to the native sum, which computes the sum of the interactions for the lower (dims=2) or higher (dims=1) level.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.union-Union{Tuple{T}, Tuple{T,T}} where T<:BipartiteNetwork","page":"Internals","title":"Base.union","text":"union(X::T, Y::T) where {T<:BipartiteNetwork}\n\nUnion of two bipartite networks – interactions and species which are present in either networks are also present in the final network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.union-Union{Tuple{T}, Tuple{T,T}} where T<:UnipartiteNetwork","page":"Internals","title":"Base.union","text":"union(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nUnion of two unipartite networks – interactions and species which are present in either networks are also present in the final network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._additive_bernoulli_variance-Tuple{Array{Float64,N} where N}","page":"Internals","title":"EcologicalNetworks._additive_bernoulli_variance","text":"Variance of a series of additive Bernoulli events\n\nf(p): ∑(p(1-p))\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._multiplicative_bernoulli_variance-Tuple{Array{Float64,N} where N}","page":"Internals","title":"EcologicalNetworks._multiplicative_bernoulli_variance","text":"Variance of a series of multiplicative Bernoulli events\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._permute_motif-Tuple{T} where T<:BipartiteNetwork","page":"Internals","title":"EcologicalNetworks._permute_motif","text":"Internal function\n\nReturns all permutations of the adjacency matrix of a motif.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._permute_motif-Tuple{T} where T<:UnipartiteNetwork","page":"Internals","title":"EcologicalNetworks._permute_motif","text":"Internal function\n\nReturns all permutations of the adjacency matrix of a motif.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._single_bernoulli_expectation-Tuple{Float64}","page":"Internals","title":"EcologicalNetworks._single_bernoulli_expectation","text":"Expected value of a single Bernoulli event\n\nSimply f(p): p\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._single_bernoulli_variance-Tuple{Float64}","page":"Internals","title":"EcologicalNetworks._single_bernoulli_variance","text":"Variance of a single Bernoulli event\n\nf(p): p(1-p)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks._value_is_a_probability-Tuple{T} where T<:AbstractFloat","page":"Internals","title":"EcologicalNetworks._value_is_a_probability","text":"Quite crude way of checking that a number is a probability\n\nThe two steps are\n\nThe number should be of the Float64 type\nThe number should belong to [0.0,1.0]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.degree_in-Tuple{AbstractEcologicalNetwork}","page":"Internals","title":"EcologicalNetworks.degree_in","text":"degree_in(N::AbstractEcologicalNetwork)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.degree_in_var-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Internals","title":"EcologicalNetworks.degree_in_var","text":"Variance in the ingoing degree\n\ndegree_in_var(N::ProbabilisticNetwork)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.degree_out-Tuple{AbstractEcologicalNetwork}","page":"Internals","title":"EcologicalNetworks.degree_out","text":"degree_out(N::AbstractEcologicalNetwork)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.degree_out_var-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Internals","title":"EcologicalNetworks.degree_out_var","text":"Variance in the outgoing degree\n\ndegree_out_var(N::ProbabilisticNetwork)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.mirror-Tuple{T} where T<:AbstractUnipartiteNetwork","page":"Internals","title":"EcologicalNetworks.mirror","text":"mirror(N::T) where {T <: AbstractUnipartiteNetwork}\n\nReturns a mirrored version of the adjacency matrix, required for spectral radius.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.nodf_axis-Tuple{BipartiteNetwork}","page":"Internals","title":"EcologicalNetworks.nodf_axis","text":"NODF of a single axis\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.nodf_axis-Tuple{BipartiteQuantitativeNetwork}","page":"Internals","title":"EcologicalNetworks.nodf_axis","text":"WNODF of a single axis\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.pdi-Tuple{T} where T<:(AbstractArray{var\"#s32\",N} where N where var\"#s32\"<:Number)","page":"Internals","title":"EcologicalNetworks.pdi","text":"pdi{T<:Number}(x::Array{T, 1})\n\nThis function will range the values of each row, so that the strongest link has a value of one. This works for deterministic and quantitative networks.\n\nReferences\n\nPoisot, T., Bever, J.D., Nemri, A., Thrall, P.H., Hochberg, M.E., 2011. A conceptual framework for the evolution of ecological specialisation. Ecol. Lett. 14, 841–851. https://doi.org/10.1111/j.1461-0248.2011.01645.x\n\nPoisot, T., Canard, E., Mouquet, N., Hochberg, M.E., 2012. A comparative study of ecological specialization estimators. Methods in Ecology and Evolution 3, 537–544. https://doi.org/10.1111/j.2041-210X.2011.00174.x\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworks.η_axis-Tuple{AbstractBipartiteNetwork}","page":"Internals","title":"EcologicalNetworks.η_axis","text":"Nestedness of a single axis (called internally by η)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#LinearAlgebra.svd-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Internals","title":"LinearAlgebra.svd","text":"LinearAlgebra.svd(N::T) where {T <: AbstractEcologicalNetwork}\n\nSVD of a network (i.e. SVD of the adjacency matrix)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Random.shuffle!-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Internals","title":"Random.shuffle!","text":"shuffle!(N::BinaryNetwork; constraint::Symbol=:degree)\n\nShuffles interactions inside a network (the network is modified), under the following constraint:\n\n:degree, which keeps the degree distribution intact\n:generality, which keeps the out-degree distribution intact\n:vulnerability, which keeps the in-degree distribution intact\n:fill, which moves interactions around freely\n\nThe function will take two interactions, and swap the species establishing them. By repeating the process a large enough number of times, the resulting network should be relatively random. Note that this function will conserve the degree (when appropriate under the selected constraint) of every species. Calling the function will perform a single shuffle. If you want to repeat the shuffling a large enough number of times, you can use something like:\n\n[shuffle!(n) for i in 1:10_000]\n\nIf the keyword arguments are invalid, the function will throw an ArgumentError.\n\nReferences\n\nFortuna, M.A., Stouffer, D.B., Olesen, J.M., Jordano, P., Mouillot, D., Krasnov, B.R., Poulin, R., Bascompte, J., 2010. Nestedness versus modularity in ecological networks: two sides of the same coin? Journal of Animal Ecology 78, 811–817. https://doi.org/10.1111/j.1365-2656.2010.01688.x\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Random.shuffle-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Internals","title":"Random.shuffle","text":"shuffle(N::BinaryNetwork; constraint::Symbol=:degree)\n\nReturn a shuffled copy of the network (the original network is not modified). See shuffle! for a documentation of the keyword arguments.\n\nReferences\n\nFortuna, M.A., Stouffer, D.B., Olesen, J.M., Jordano, P., Mouillot, D., Krasnov, B.R., Poulin, R., Bascompte, J., 2010. Nestedness versus modularity in ecological networks: two sides of the same coin? Journal of Animal Ecology 78, 811–817. https://doi.org/10.1111/j.1365-2656.2010.01688.x\n\n\n\n\n\n","category":"method"},{"location":"properties/links/#Links,-degree,-connectance","page":"Links","title":"Links, degree, connectance","text":"","category":"section"},{"location":"properties/links/#Connectance-and-number-of-links","page":"Links","title":"Connectance and number of links","text":"","category":"section"},{"location":"properties/links/","page":"Links","title":"Links","text":"sum\nlinks\nconnectance\nlinkage_density","category":"page"},{"location":"properties/links/#Base.sum","page":"Links","title":"Base.sum","text":"sum(N::AbstractEcologicalNetwork; dims=nothing)\n\nThis function will return the sum of all interactions in the network. For quantitative networks, this is the sum of interaction strengths. For binary networks, this is the number of interactions. For probabilistic networks, this is the expected number of realized interactions.\n\nOptionally, one can give the argument dims, simular to the native sum, which computes the sum of the interactions for the lower (dims=2) or higher (dims=1) level.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.links","page":"Links","title":"EcologicalNetworks.links","text":"links(N::BinaryNetwork)\n\nNumber of non-zero interactions in a deterministic network.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\nlinks(N::QuantitativeNetwork)\n\nNumber of non-zero interactions in a quantitative network (use sum to get the sum of interaction strengths).\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\nlinks(N::ProbabilisticNetwork)\n\nExpected number of interactions in a probabilistic network. To get the number of interactions that have a non-zero probability, use e.g. links(N>0.0).\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.connectance","page":"Links","title":"EcologicalNetworks.connectance","text":"connectance(N::AbstractEcologicalNetwork)\n\nNumber of links divided by the number of possible interactions. In unipartite networks, this is LS^2. In bipartite networks, this is L(T  B). It is worth noting that while the maximal connectance is always 1 (i.e. the graph is complete), the minimum value (assuming that the network is not degenerate) is not 0. Instead, the minimum number of interactions in a unipartite network is S-1, and in a bipartite network it is max(T,B).\n\nConnectance can therefore be transformed between 0 and 1, using the following approach: let m be the minimum number of interactions, and Co be the measured connectance, then the corrected value is (Co-m)/(1-m). To our best knowledge, this is not standard practice, and therefore is not suggested as a function in the package.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.linkage_density","page":"Links","title":"EcologicalNetworks.linkage_density","text":"linkage_density(N::AbstractEcologicalNetwork)\n\nNumber of links divided by species richness.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Degree","page":"Links","title":"Degree","text":"","category":"section"},{"location":"properties/links/","page":"Links","title":"Links","text":"degree","category":"page"},{"location":"properties/links/#EcologicalNetworks.degree","page":"Links","title":"EcologicalNetworks.degree","text":"degree(N::AbstractEcologicalNetwork; dims::Union{Nothing,Integer}=nothing)\n\nReturns the degrees of nodes in a network; dims can be 1 for out degree, or 2 for in degree.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\nWilliams, R.J., 2011. Biology, Methodology or Chance? The Degree Distributions of Bipartite Ecological Networks. PLoS One 6, e17645. https://doi.org/10.1371/journal.pone.0017645\n\n\n\n\n\n","category":"function"},{"location":"properties/links/","page":"Links","title":"Links","text":"degree_var","category":"page"},{"location":"properties/links/#EcologicalNetworks.degree_var","page":"Links","title":"EcologicalNetworks.degree_var","text":"degree_var(N::ProbabilisticNetwork; dims::Union{Nothing,Integer}=nothing)\n\nVariance in the degree of species in a probabilistic network.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Species-without-interactions","page":"Links","title":"Species without interactions","text":"","category":"section"},{"location":"properties/links/","page":"Links","title":"Links","text":"isdegenerate\nsimplify!\nsimplify","category":"page"},{"location":"properties/links/#EcologicalNetworks.isdegenerate","page":"Links","title":"EcologicalNetworks.isdegenerate","text":"isdegenerate(N::AbstractEcologicalNetwork)\n\nNetworks are called degenerate if some species have no interactions, either at all, or with any species other than themselves. This is particularly useful to decide the networks to keep when generating samples for null models.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.simplify!","page":"Links","title":"EcologicalNetworks.simplify!","text":"simplify!{T<:BipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\nsimplify!{T<:BipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\nsimplify!{T<:BipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\nsimplify!(N::UnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\nsimplify!(N::UnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\nsimplify!(N::UnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.simplify","page":"Links","title":"EcologicalNetworks.simplify","text":"simplify(N::T) where {T<:AbstractEcoloigcalNetwork}\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Species-level-specificity","page":"Links","title":"Species-level specificity","text":"","category":"section"},{"location":"properties/links/","page":"Links","title":"Links","text":"specificity","category":"page"},{"location":"properties/links/#EcologicalNetworks.specificity","page":"Links","title":"EcologicalNetworks.specificity","text":"specificity(N::DeterministicNetwork)\n\nMeasure of specificity in a deterministic network. This returns a value between 0 and 1, where 1 indicates maximal specificity.\n\nReferences\n\nPoisot, T., Bever, J.D., Nemri, A., Thrall, P.H., Hochberg, M.E., 2011. A conceptual framework for the evolution of ecological specialisation. Ecol. Lett. 14, 841–851. https://doi.org/10.1111/j.1461-0248.2011.01645.x\nPoisot, T., Canard, E., Mouquet, N., Hochberg, M.E., 2012. A comparative study of ecological specialization estimators. Methods in Ecology and Evolution 3, 537–544. https://doi.org/10.1111/j.2041-210X.2011.00174.x\n\n\n\n\n\n","category":"function"},{"location":"properties/nestedness/#Nestedness","page":"Nestedness","title":"Nestedness","text":"","category":"section"},{"location":"properties/nestedness/","page":"Nestedness","title":"Nestedness","text":"η\nnodf\nρ","category":"page"},{"location":"properties/nestedness/#EcologicalNetworks.η","page":"Nestedness","title":"EcologicalNetworks.η","text":"η(N::T, dims::Union{Nothing,Integer}=nothing) where {T <: Union{BipartiteNetwork, BipartiteProbaNetwork}}\n\nReturns the nestedness of a margin of the network, using η. The second argument can be 1 (for nestedness of rows/top level) or 2 (for nestedness of columns/bottom level). Leaving it at nothing will measure the nestedness of the entire network.\n\nReferences\n\nBastolla, U., Fortuna, M.A., Pascual-García, A., Ferrera, A., Luque, B., Bascompte, J., 2009. The architecture of mutualistic networks minimizes competition and increases biodiversity. Nature 458, 1018–1020. https://doi.org/10.1038/nature07950\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/nestedness/#EcologicalNetworks.nodf","page":"Nestedness","title":"EcologicalNetworks.nodf","text":"nodf(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: Union{BipartiteNetwork,BipartiteQuantitativeNetwork}}\n\nReturns nodf for a margin of the network. The i argument can be 1 for top-level, 2 for bottom level, and the function will throw an ArgumentError if an invalid value is used. For quantitative networks, WNODF is used.\n\nReferences\n\nAlmeida-Neto, M., Guimarães, P.R., Loyola, R.D., Ulrich, W., 2008. A consistent metric for nestedness analysis in ecological systems: reconciling concept and measurement. Oikos 117, 1227–1239. https://doi.org/10.1111/j.0030-1299.2008.16644.x\n\nAlmeida-Neto, M., Ulrich, W., 2011. A straightforward computational approach for measuring nestedness using quantitative matrices. Environmental Modelling & Software 26, 173–178. https://doi.org/10.1016/j.envsoft.2010.08.003\n\n\n\n\n\n","category":"function"},{"location":"properties/nestedness/#EcologicalNetworks.ρ","page":"Nestedness","title":"EcologicalNetworks.ρ","text":"ρ(N::T; range=EcologicalNetworks.ρ_ska) where {T <: UnipartiteNetwork}\n\nReturns the spectral radius (the absolute value of the largest real part of the eigenvalues of the adjacency matrix) of any unipartite network whose interactions are positive or null. The spectral radius is measured on the mirrored version of the matrix, so that an interaction from i to j also implies an interaction from j to i.\n\nNote that the spectral radius has been suggested as a measure of nestedness by Staniczenko et al. (2013). Phillips (2011) uses it as a measure of the ability of a system to dampen or absorb perturbations.\n\nMaximal values\n\nThe spectral radius is sensitive to network size, and to a certain extent to the number of links. The keyword argument range will divide return a ranged version of the spectral radius, so that it is expressed relatively to its maximal value. The range argument takes a function, which requires two arguments: the network (which must be unipartite), and the value of the spectral radius.\n\nOptions that come with EcologicalNetworks.jl (where L is the number of links and S the number of nodes) are:\n\nEcologicalNetworks.ρ_phillips: divides by the square root of (2L(S-1))/S, as in Phillips (20110)\nEcologicalNetworks.ρ_ska: divides by the square root of L, as in Staniczenko et al. (2013) - this is the default, and has an upper bound of the square root of the number of links\nEcologicalNetworks.ρ_raw: returns the raw value\n\nReferences\n\nPhillips, J.D., 2011. The structure of ecological state transitions: Amplification, synchronization, and constraints in responses to environmental change. Ecological Complexity, 8, 336–346. https://doi.org/10.1016/j.ecocom.2011.07.004\nStaniczenko, P.P.A., Kopp, J.C., Allesina, S., 2013. The ghost of nestedness in ecological networks. Nat Commun 4, 1391. https://doi.org/10.1038/ncomms2422\n\n\n\n\n\nρ(N::T; varargs...) where {T <: BipartiteNetwork}\n\nBipartite version of the spectral radius. In practice, this casts the network into its unipartite representation, since the spectral radius only makes sense for square matrices.\n\n\n\n\n\n","category":"function"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"In this example, we will show how EcologicalNetworks.jl can be integrated with Mangal.jl to analyse many ecological networks. Specifically, we will show how to analyse the association between meaningful network properties (i.e. connectance, nestedness, and modularity) using all food webs archived on the mangal.io online database.","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"To conduct this analysis, we need to upload the following packages:","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"using EcologicalNetworks\nusing Mangal\nusing DataFrames\nusing Plots\nusing Plots.PlotMeasures","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"We first retrieve relevant metadata for all 1,386 networks archived on mangal.io using the Mangal.jl package. We count the number of species S and the total number of interactions L in each network, as well as their number of trophic interactions (predation and herbivory). We store these information in a data frame along with the networks' ID numbers, and print the first 5 elements. Due to the high number of networks we handle, note that this step might take some time to run.","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"number_of_networks = count(MangalNetwork)\ncount_per_page = 100\nnumber_of_pages = convert(Int, ceil(number_of_networks/count_per_page))\n\nmangal_networks = DataFrame(fill(Int64, 5),\n                 [:id, :S, :L, :pred, :herb],\n                 number_of_networks)\n\nglobal cursor = 1\nfor page in 1:number_of_pages\n    global cursor\n    networks_in_page = Mangal.networks(\"count\" => count_per_page, \"page\" => page-1)\n    for current_network in networks_in_page\n        S = count(MangalNode, current_network)\n        L = count(MangalInteraction, current_network)\n        pred = count(MangalInteraction, current_network, \"type\" => \"predation\")\n        herb = count(MangalInteraction, current_network, \"type\" => \"herbivory\")\n        mangal_networks[cursor,:] .= (current_network.id, S, L, pred, herb)\n        cursor = cursor + 1\n    end\nend\n\nfirst(mangal_networks, 5)","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"We now have all the information we need to identify all food webs archived on mangal.io. Here we consider as food webs any ecological networks mainly composed of trophic interactions. We find that 259 networks meet this condition.  ","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"foodwebs = mangal_networks[mangal_networks[!, :pred] .+ mangal_networks[!, :herb] ./ mangal_networks[!, :L] .> 0.5, :]\n\nfirst(foodwebs, 5)","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"To analyse their properties, we first need to read all of these food webs using the Mangal.jl package, and then convert them to UnipartiteNetworks using the EcologicalNetworks.jl package. ","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"mangal_foodwebs = network.(foodwebs.id)\n\nunipartite_foodwebs = convert.(UnipartiteNetwork, mangal_foodwebs)\n\nunipartite_foodwebs[1:5]","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"We can then compute any measure supported by EcologicalNetworks.jl for UnipartiteNetworks. In this example, we compute connectance, nestedness, and modularity. To compute network modularity, we use 100 random species assignments in 3 to 15 groups as our starters, the BRIM algorithm to optimize the modularity for each of these random partitions, and retain the maximum value for each food web. Readers are invited to take a look at the documentation for further details on how to compute modularity.","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"foodweb_measures = DataFrame(fill(Float64, 3),\n                 [:connect, :nested, :modul],\n                 length(unipartite_foodwebs))\n\n# connectance\nfoodweb_measures.connect = connectance.(unipartite_foodwebs)\n\n# nestedness\nfoodweb_measures.nested = ρ.(unipartite_foodwebs)\n\n# modularity (BRIM algorithm)\nnumber_of_modules = repeat(3:15, outer=100)\nmodules = Array{Dict}(undef, length(number_of_modules))\n\nfor i in eachindex(unipartite_foodwebs)\n    current_network = unipartite_foodwebs[i]\n    for j in eachindex(number_of_modules)\n        _, modules[j] = n_random_modules(number_of_modules[j])(current_network) |> x -> brim(x...)\n    end\n    partition_modularity = map(x -> Q(current_network,x), modules);\n    foodweb_measures.modul[i] = maximum(partition_modularity)\nend\n\nfirst(foodweb_measures, 5)","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"The association between these food-web measures can then be plotted. We find that modularity is negatively associated with connectance and nestedness, whereas nestesdness and connectance are positively associated.","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"pal=RGB(204/255,121/255,167/255)\n\nscatter(foodweb_measures.connect, foodweb_measures.nested,\n    alpha=0.6, color=pal,\n    lab=\"\", framestyle=:box,\n    xlabel=\"Connectance\",\n    ylabel=\"Nestedness\",\n    margin = 10mm)","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"scatter(foodweb_measures.connect, foodweb_measures.modul,\n    alpha=0.6, color=pal,\n    lab=\"\",framestyle=:box,\n    xlabel=\"Connectance\",\n    ylabel=\"Modularity\",\n    margin = 10mm)","category":"page"},{"location":"examples/mangal/","page":"Integration with Mangal","title":"Integration with Mangal","text":"scatter(foodweb_measures.modul, foodweb_measures.nested,\n    alpha=0.6, color=pal,\n    lab=\"\", framestyle=:box,\n    xlabel=\"Modularity\",\n    ylabel=\"Nestedness\",\n    margin = 10mm)","category":"page"},{"location":"lib/public/#Public-methods","page":"Public methods","title":"Public methods","text":"","category":"section"},{"location":"lib/public/","page":"Public methods","title":"Public methods","text":"Modules = [EcologicalNetworks]\nPrivate = false\nPublic = true\nOrder = [:function]","category":"page"},{"location":"lib/public/#EcologicalNetworks.AJS-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.AJS","text":"AJS(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nAdditive Jaccard Similarity for pairs of species in the network. AJS varies between 0 (no common species) to 1 (same profiles). This function can be used to measure AJS based on only successors or predecessors, using the dims argument.\n\nNote that this function uses all direct preys and predators to measure the similarity (and so does not go beyond the immediate neighbors).\n\nReferences\n\nGao, P., Kupfer, J.A., 2015. Uncovering food web structure using a novel trophic similarity measure. Ecological Informatics 30, 110–118. https://doi.org/10.1016/j.ecoinf.2015.09.013\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.EAJS-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.EAJS","text":"EAJS(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nExtended Additive Jaccard Similarity for pairs of species in the network. AJS varies between 0 (no common species) to 1 (same profiles). This function can be used to measure AJS based on only successors or predecessors, using the dims argument.\n\nNote that this function counts all interactions up to a distance of 50 to define the neighbourhood of a species. This should be more than sufficient for most ecological networks.\n\nReferences\n\nGao, P., Kupfer, J.A., 2015. Uncovering food web structure using a novel trophic similarity measure. Ecological Informatics 30, 110–118. https://doi.org/10.1016/j.ecoinf.2015.09.013\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.KGL01-Tuple{T} where T<:NamedTuple","page":"Public methods","title":"EcologicalNetworks.KGL01","text":"KGL01(S::T)\n\nWhittaker\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.Q-Union{Tuple{E}, Tuple{T}, Tuple{T,Dict{E,Int64}}} where E where T<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.Q","text":"Q(N::T, L::Dict{E,Int64}) where {T<:AbstractEcologicalNetwork,E}\n\nModularity of a network and its partition. The second argument is a dictionary where every species of N is associated to an Int64 value representing the identity of the module. This function returns the same value of bipartite networks and their unipartite projection.\n\nReferences\n\nBarber, M.J., 2007. Modularity and community detection in bipartite networks. Phys. Rev. E 76, 066102. https://doi.org/10.1103/PhysRevE.76.066102\nNewman, M.E., 2006. Modularity and community structure in networks. Proceedings of the national academy of sciences 103, 8577–8582.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.Qr-Union{Tuple{E}, Tuple{T}, Tuple{T,Dict{E,Int64}}} where E where T<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.Qr","text":"Qr(N::T, L::Dict{E,Int64}) where {T<:AbstractEcologicalNetwork,E}\n\nRealized modularity – this function returns a value giving the proportion of all links that are within the same module. Higher values reflect a more strongly modular partition (whereas Q represents the deviation of modularity from the random expectation).\n\nReferences\n\nPoisot, T., 2013. An a posteriori measure of network modularity. F1000Research\nhttps://doi.org/10.12688/f1000research.2-130.v3\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.RDPG-Tuple{T} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.RDPG","text":"RDPG(N::BinaryNetwork; rank::Integer=3)\n\nGiven a binary network N, RDPG(N) returns a probabilistic network with the same number of species, where every interaction happens with a probability equal to the dot product of species representation in the network N's RDPG space of rank rank.\n\nBecause the pairwise dot product obtained by the matrix multiplication of the two spaces Left * Right are not granted to be bounded between 0 and 1 (for numerical and theoric reasons), we bound the entries to be in the [0,1] range.\n\nReferences\n\nDalla Riva, G.V. and Stouffer, D.B., 2016. Exploring the evolutionary signature of food webs' backbones using functional traits. Oikos, 125(4), pp.446-456. https://doi.org/10.1111/oik.02305\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.bellman_ford-Tuple{T} where T<:Union{BipartiteNetwork, BipartiteQuantitativeNetwork, UnipartiteNetwork, UnipartiteQuantitativeNetwork}","page":"Public methods","title":"EcologicalNetworks.bellman_ford","text":"bellman_ford(N::T) where {T <: DeterministicNetwork}\n\nBellman-ford algorithm to return the shortest / easiest paths between all pairs of species in the networks, as long as paths exists. This function will return a tuple, with fields from, to and weight. The number of elements in the tuple is the number of paths. This function works with quantitative and binary networks, and assumes that no interactions are negative.\n\nCurrently, the Bellman-Ford algorithm is slower than the shortest_path function, but the arguments are returned in a more usable way. Note that the speed penalty is only valid when measuring the shortest paths in the entire network (and will be fixed relatively soon), and does not apply as much for the shortest paths from a single source node.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.bellman_ford-Union{Tuple{K}, Tuple{T}, Tuple{T,K}} where K where T<:Union{BipartiteNetwork, BipartiteQuantitativeNetwork, UnipartiteNetwork, UnipartiteQuantitativeNetwork}","page":"Public methods","title":"EcologicalNetworks.bellman_ford","text":"bellman_ford(N::T, source::K) where {T <: DeterministicNetwork, K}\n\nBellman-Ford algorithm to return the shortest / easiest paths from a source species. Refer to the bellman_ford global documentation for the output format.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.brim-Union{Tuple{E}, Tuple{NT}, Tuple{NT,Dict{E,Int64}}} where E where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.brim","text":"brim(N::NT, L::Dict{E,Int64}) where {NT<:AbstractEcologicalNetwork,E}\n\nUses BRIM to optimize the modularity of an ecological network. The L argument is a dictionary mapping every species in the network to its module. This function returns a tuple of the network and its module assignment.\n\nReferences\n\nBarber, M.J., 2007. Modularity and community detection in bipartite networks. Phys. Rev. E 76, 066102. https://doi.org/10.1103/PhysRevE.76.066102\nNewman, M.E., 2006. Modularity and community structure in networks. Proceedings of the national academy of sciences 103, 8577–8582.\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.cascademodel-Tuple{Int64,Float64}","page":"Public methods","title":"EcologicalNetworks.cascademodel","text":"cascademodel(S::Int64, Co::Float64)\n\nReturn matrix of the type UnipartiteNetwork randomly assembled according to the cascade model for a given nuber of S and connectivity Co.\n\nSee also: nichemodel, mpnmodel, nestedhierarchymodel\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.cascademodel-Tuple{Int64,Int64}","page":"Public methods","title":"EcologicalNetworks.cascademodel","text":"cascademodel(S::Int64, L::Int64)\n\nNumber of links can be specified instead of connectance.\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.cascademodel-Tuple{Tuple}","page":"Public methods","title":"EcologicalNetworks.cascademodel","text":"cascademodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (S::Int64, Co::Float64) or (S::Int64, L::Int64).\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.cascademodel-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.cascademodel","text":"cascademodel(N::T) where {T <: UnipartiteNetwork}\n\nApplied to a UnipartiteNetwork return its randomized version.\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.centrality_closeness-Tuple{UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.centrality_closeness","text":"centrality_closeness(N::UnipartiteNetwork; nmax::Int64=20)\n\nThe function calls shortest_path internally – the nmax argument is the maximal path length that will be tried.\n\nReferences\n\nBavelas, A., 1950. Communication Patterns in Task‐Oriented Groups. The Journal of the Acoustical Society of America 22, 725–730. doi:10.1121/1.1906679\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.centrality_degree-Tuple{UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.centrality_degree","text":"centrality_degree(N::UnipartiteNetwork)\n\nDegree centrality, corrected by the maximum degree (the most central species has a degree of 1).\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.centrality_eigenvector-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.centrality_eigenvector","text":"centrality_eigenvector(N::AbstractUnipartiteNetwork)\n\nEigen centrality, corrected by the maximum degree (the most central species has a degree of 1).\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.centrality_harmonic-Tuple{UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.centrality_harmonic","text":"centrality_harmonic(N::UnipartiteNetwork; nmax::Int64=20)\n\nThe function calls shortest_path internally – the nmax argument is the maximal path length that will be tried.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.centrality_katz-Tuple{Union{UnipartiteNetwork, UnipartiteProbabilisticNetwork}}","page":"Public methods","title":"EcologicalNetworks.centrality_katz","text":"centrality_katz(N::Unipartite; a::Float64=0.1, k::Int64=5)\n\nThis measure can work on different path length (k), and give a different weight to every subsequent connection (a). k must be at least 1 (only immediate neighbors are considered). a (being a weight), must be positive.\n\nKatz, L., 1953. A new status index derived from sociometric analysis. Psychometrika 18, 39–43. doi:10.1007/bf02289026\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.conditional_entropy-Tuple{AbstractArray,Integer}","page":"Public methods","title":"EcologicalNetworks.conditional_entropy","text":"conditional_entropy(P::AbstractArray, given::I)\n\nComputes the conditional entropy of probability matrix. If given = 1, it is the entropy of the columns, and vise versa when given = 2. Output in bits.\n\nDoes not check whether P is a valid probability matrix.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.conditional_entropy-Union{Tuple{I}, Tuple{NT}, Tuple{NT,I}} where I<:Int64 where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.conditional_entropy","text":"conditional_entropy(N::AbstractEcologicalNetwork, given::I)\n\nComputes the conditional entropy of an ecological network. If given = 1, it is the entropy of the columns, and vise versa when given = 2.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.connectance-Tuple{AbstractEcologicalNetwork}","page":"Public methods","title":"EcologicalNetworks.connectance","text":"connectance(N::AbstractEcologicalNetwork)\n\nNumber of links divided by the number of possible interactions. In unipartite networks, this is LS^2. In bipartite networks, this is L(T  B). It is worth noting that while the maximal connectance is always 1 (i.e. the graph is complete), the minimum value (assuming that the network is not degenerate) is not 0. Instead, the minimum number of interactions in a unipartite network is S-1, and in a bipartite network it is max(T,B).\n\nConnectance can therefore be transformed between 0 and 1, using the following approach: let m be the minimum number of interactions, and Co be the measured connectance, then the corrected value is (Co-m)/(1-m). To our best knowledge, this is not standard practice, and therefore is not suggested as a function in the package.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.connectance_var-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Public methods","title":"EcologicalNetworks.connectance_var","text":"connectance_var(N::ProbabilisticNetwork)\n\nExpected variance of the connectance for a probabilistic matrix, measured as the variance of the number of links divided by the squared size of the matrix.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.convert2effective-Tuple{R} where R<:Real","page":"Public methods","title":"EcologicalNetworks.convert2effective","text":"convert2effective(indice::Real)\n\nConvert an information theory indices in an effective number (i.e. number of corresponding interactions). Assumes an input in bits (i.e. log with base 2 is used).\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.degree-Tuple{AbstractEcologicalNetwork}","page":"Public methods","title":"EcologicalNetworks.degree","text":"degree(N::AbstractEcologicalNetwork; dims::Union{Nothing,Integer}=nothing)\n\nReturns the degrees of nodes in a network; dims can be 1 for out degree, or 2 for in degree.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\nWilliams, R.J., 2011. Biology, Methodology or Chance? The Degree Distributions of Bipartite Ecological Networks. PLoS One 6, e17645. https://doi.org/10.1371/journal.pone.0017645\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.degree_var-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Public methods","title":"EcologicalNetworks.degree_var","text":"degree_var(N::ProbabilisticNetwork; dims::Union{Nothing,Integer}=nothing)\n\nVariance in the degree of species in a probabilistic network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.diff_entropy_uniform-Tuple{AbstractArray}","page":"Public methods","title":"EcologicalNetworks.diff_entropy_uniform","text":"diff_entropy_uniform(P::AbstractArray; [dims])\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.diff_entropy_uniform-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.diff_entropy_uniform","text":"diff_entropy_uniform(N::AbstractEcologicalNetwork, dims::I=nothing)\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.dijkstra-Tuple{T} where T<:Union{BipartiteNetwork, BipartiteQuantitativeNetwork, UnipartiteNetwork, UnipartiteQuantitativeNetwork}","page":"Public methods","title":"EcologicalNetworks.dijkstra","text":"dijkstra(N::T) where {T <: DeterministicNetwork}\n\nDijkstra algorithm to return the shortest / easiest paths between all pairs of species in the networks, as long as paths exists. This function will return a tuple, with fields from, to and weight. The number of elements in the tuple is the number of paths. This function works with quantitative and binary networks, and assumes that no interactions are negative.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.dijkstra-Union{Tuple{K}, Tuple{T}, Tuple{T,K}} where K where T<:Union{BipartiteNetwork, BipartiteQuantitativeNetwork, UnipartiteNetwork, UnipartiteQuantitativeNetwork}","page":"Public methods","title":"EcologicalNetworks.dijkstra","text":"dijkstra(N::T, source::K) where {T <: DeterministicNetwork, K}\n\nDijkstra's algorithm to return the shortest / easiest paths from a source species. Refer to the bellman_ford global documentation for the output format.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.each_species_its_module-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.each_species_its_module","text":"each_species_its_module(N::T) where {T<:AbstractEcologicalNetwork}\n\nReturns a dictionary in which each species is its own module. This is used as a starting point for lp and salp internally. This is often a very poor starting point for brim, and should probably not be used on its own.\n\nReferences\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.entropy-Tuple{AbstractArray}","page":"Public methods","title":"EcologicalNetworks.entropy","text":"entropy(P::AbstractArray; [dims])\n\nComputes the joint entropy of a probability matrix. Does not perform any checks whether the matrix is normalized. Output in bits.\n\nIf the dims keyword argument is provided, the marginal entropy of the matrix is computed. dims indicates whether to compute the entropy for the rows  (dims=1) or columns (dims=2).\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.entropy-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.entropy","text":"entropy(N::AbstractEcologicalNetwork; [dims])\n\nComputes the joint entropy of an ecological network. If dims is specified, The marginal entropy of the ecological network is computed. dims indicates whether to compute the entropy for the rows (dims=1) or columns (dims=2). Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.expected_motif_count-Tuple{Any}","page":"Public methods","title":"EcologicalNetworks.expected_motif_count","text":"expected_motif_count(s)\n\nGet the expected number of motifs (and variance) from the output of find_motif on a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.find_motif-Union{Tuple{T2}, Tuple{T1}, Tuple{T1,T2}} where T2<:Union{BipartiteNetwork, UnipartiteNetwork} where T1<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.find_motif","text":"find_motif(N::T1, m::T2) where {T1<:AbstractEcologicalNetwork, T2<:BinaryNetwork}\n\nReturns an array of tuples, in which each tuple contains the species that are part of the motif. The length of the array gives the number of times the motif was found. For probabilistic networks, the tuple also contains the probability of observing the species in the correct conformation for the motif, as well as the variance.\n\nReferences\n\nMilo, R., Shen-Orr, S., Itzkovitz, S., Kashtan, N., Chklovskii, D., Alon, U.,\nNetwork motifs: simple building blocks of complex networks. Science 298,\n824–7. https://doi.org/10.1126/science.298.5594.824\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.functional_cartography-Union{Tuple{E}, Tuple{T}, Tuple{T,Dict{E,Int64}}} where E where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.functional_cartography","text":"functional_cartography(N::T, L::Dict{E,Int64}) where {T<:BinaryNetwork, E}\n\nThis function will take the output of a modularity analysis (i.e. a network and a partition), and return a dictionary where every species is associated to its functional role, as defined in Olesen et al (2005). The first element is the within-module degree z-score, and the second is the participation coefficient.\n\nReferences\n\nGuimerà, R., Amaral, L.A.N., 2005. Cartography of complex networks: modules and universal roles. Journal of Statistical Mechanics: Theory and Experiment 2005, P02001. https://doi.org/10.1088/1742-5468/2005/02/P02001\n\nGuimerà, R., Nunes Amaral, L.A., 2005. Functional cartography of complex metabolic networks. Nature 433, 895–900. https://doi.org/10.1038/nature03288\n\nOlesen, J.M., Bascompte, J., Dupont, Y.L., Jordano, P., 2007. The modularity of pollination networks. Proceedings of the National Academy of Sciences 104, 19891–19896. https://doi.org/10.1073/pnas.0706375104\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.has_interaction-Tuple{AbstractEcologicalNetwork,Int64,Int64}","page":"Public methods","title":"EcologicalNetworks.has_interaction","text":"has_interaction(N::AbstractEcologicalNetwork, i::Int64, j::Int64)\n\nThis function returns true if the interaction between i and j is not 0. This refers to species by their position instead of their name, and is not recommended as the main solution. This is used internally by a few functions, but is exported because it may be of general use.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.has_interaction-Union{Tuple{NT}, Tuple{AbstractEcologicalNetwork,NT,NT}} where NT","page":"Public methods","title":"EcologicalNetworks.has_interaction","text":"has_interaction{(N::AbstractEcologicalNetwork, i::NT, j::NT)\n\nThis function returns true if the interaction between i and j is not 0. This refers to species by their names/values, and is the recommended way to test for the presence of an interaction.\n\nUse N[i,j] if you need to get the value of the interaction.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.heterogeneity-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.heterogeneity","text":"heterogeneity(N::AbstractUnipartiteNetwork)\n\nComputes the heterogeneity for an unipartite network, a topological characteristic which quantifies the difference in in- and outgoing degrees between species. It is computed as σin * σout / s_mean. A value of 0 indicates that all species have the same (weighted) in- and outdegrees.\n\nGoa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.information_decomposition-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.information_decomposition","text":"information_decomposition(N::AbstractEcologicalNetwork; norm::Bool=false, dims=nothing)\n\nPerforms an information theory decomposition of a given ecological network, i.e. the information content in the normalized adjacency matrix is split in:\n\n:D : difference in entropy of marginals compared to an uniform distribition\n:I : mutual information\n:V : variation of information / conditional entropy\n\nIf norm=true, the components are normalized such that their sum is equal to 1. One can optinally give the dimision, indicating whether to compute the indices for the rows (dims=1), columns (dims=2) or the whole matrix (default).\n\nResult is returned in a Dict. Outputs in bits.\n\nStock, M.; Hoebeke, L.; De Baets, B. « Disentangling the Information in Species Interaction Networks ». Entropy 2021, 23, 703. https://doi.org/10.3390/e23060703\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.interactions-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Public methods","title":"EcologicalNetworks.interactions","text":"interactions(N::AbstractEcologicalNetwork)\n\nReturns the interactions in the ecological network. Interactions are returned as an array of named tuples. A minima, these have fields from and to. For networks that are probabilistic, there is a probability field. For networks that are quantitative, there is a strength field. This functions allows to iterate over interactions in a network in a convenient way.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.isdegenerate-Tuple{AbstractEcologicalNetwork}","page":"Public methods","title":"EcologicalNetworks.isdegenerate","text":"isdegenerate(N::AbstractEcologicalNetwork)\n\nNetworks are called degenerate if some species have no interactions, either at all, or with any species other than themselves. This is particularly useful to decide the networks to keep when generating samples for null models.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.linearfilter-Tuple{T} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.linearfilter","text":"linearfilter(N::BinaryNetwork, α::Vector{Float64}=[0.25, 0.25, 0.25, 0.25])\n\nGiven a network N compute the linear filter scores according to Stock et al. (2017). High scores for negative interactions indicate potential false negative or missing interactions. Though this it returned as a probabilistic network, score do not necessary convey a probabilistic interpretation.\n\nThe values of α give the relative weight of, in order, the measured interaction value, the out-degree of the species, the in-degree of the species, and of network connectance. The default parameterization is to have all four at equal importance.\n\nReferences\n\nStock, M., Pahikkala, T., Airola, A., Waegeman, W., Baets, B.D., 2018. Algebraic Shortcuts for Leave-One-Out Cross-Validation in Supervised Network Inference. bioRxiv 242321. https://doi.org/10.1101/242321\n\nStock, M., Poisot, T., Waegeman, W., Baets, B.D., 2017. Linear filtering reveals false negatives in species interaction data. Scientific Reports 7, 45908. https://doi.org/10.1038/srep45908\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.linearfilterzoo-Tuple{T} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.linearfilterzoo","text":"linearfilterzoo(N::BinaryNetwork, α::Vector{Float64}=[0.25, 0.25, 0.25, 0.25])\n\nCompute the zero-one-out version of the linear filter (linearfilter), i.e. the score for each interaction if that interaction would not occur in the network. For example, if N[4, 6] = 1 (interaction between species 4 and 6), the result at postion (4, 6) is the score of the filter using a network in which that interaction did not occur. This function is useful for validating the filter whether it can detect false negative (missing) interactions.\n\nReferences\n\nStock, M., Pahikkala, T., Airola, A., Waegeman, W., Baets, B.D., 2018. Algebraic Shortcuts for Leave-One-Out Cross-Validation in Supervised Network Inference. bioRxiv 242321. https://doi.org/10.1101/242321\n\nStock, M., Poisot, T., Waegeman, W., Baets, B.D., 2017. Linear filtering reveals false negatives in species interaction data. Scientific Reports 7, 45908. https://doi.org/10.1038/srep45908\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.linkage_density-Tuple{AbstractEcologicalNetwork}","page":"Public methods","title":"EcologicalNetworks.linkage_density","text":"linkage_density(N::AbstractEcologicalNetwork)\n\nNumber of links divided by species richness.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.links-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Public methods","title":"EcologicalNetworks.links","text":"links(N::BinaryNetwork)\n\nNumber of non-zero interactions in a deterministic network.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.links-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Public methods","title":"EcologicalNetworks.links","text":"links(N::ProbabilisticNetwork)\n\nExpected number of interactions in a probabilistic network. To get the number of interactions that have a non-zero probability, use e.g. links(N>0.0).\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.links-Tuple{Union{BipartiteQuantitativeNetwork, UnipartiteQuantitativeNetwork}}","page":"Public methods","title":"EcologicalNetworks.links","text":"links(N::QuantitativeNetwork)\n\nNumber of non-zero interactions in a quantitative network (use sum to get the sum of interaction strengths).\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.links_var-Tuple{Union{BipartiteProbabilisticNetwork, UnipartiteProbabilisticNetwork}}","page":"Public methods","title":"EcologicalNetworks.links_var","text":"links_var(N::ProbabilisticNetwork)\n\nExpected variance of the number of links for a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.lp-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.lp","text":"lp(N::T) where {T<:AbstractEcologicalNetwork}\n\nUses label propagation to generate a first approximation of the modular structure of a network. This is usually followed by the BRIM (brim) method. This method supposedly performs better for large graphs, but we rarely observed any differences between it and variations of BRIM alone on smaller graphs.\n\nReferences\n\nLiu, X., Murata, T., 2009. Community Detection in Large-Scale Bipartite Networks, in: 2009 IEEE/WIC/ACM International Joint Conference on Web Intelligence and Intelligent Agent Technology. Institute of Electrical & Electronics Engineers (IEEE). https://doi.org/10.1109/wi-iat.2009.15\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.make_joint_distribution-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.make_joint_distribution","text":"make_joint_distribution(N::NT) where {NT<:AbstractEcologicalNetwork}\n\nReturns a probability matrix computed from the adjacency or incidence matrix. Raises an error if the matrix contains negative values. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.mpnmodel-Tuple{Int64,Float64,Float64}","page":"Public methods","title":"EcologicalNetworks.mpnmodel","text":"mpnmodel(S::Int64, Co::Float64, forbidden::Float64)\n\nReturn UnipartiteNetwork with links assigned according to minimum potential niche model for given number of S, connectivity Co and probability of forbidden link occurence.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.mpnmodel-Tuple{Int64,Int64,Float64}","page":"Public methods","title":"EcologicalNetworks.mpnmodel","text":"mpnmodel(mpnmodel(S::Int64, L::Int64, forbidden::Float64))\n\nAverage number of links can be specified instead of connectance.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.mpnmodel-Tuple{Tuple}","page":"Public methods","title":"EcologicalNetworks.mpnmodel","text":"mpnmodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (S::Int64, Co::Float64, forbidden::Float64).\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.mpnmodel-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.mpnmodel","text":"mpnmodel(N::T) where {T<: UnipartiteNetwork}\n\nApplied to UnipartiteNetwork return its randomized version.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.mutual_information-Tuple{AbstractArray}","page":"Public methods","title":"EcologicalNetworks.mutual_information","text":"mutual_information(P::AbstractArray)\n\nComputes the mutual information of a probability matrix. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.mutual_information-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.mutual_information","text":"mutual_information(N::NT) where {NT<:AbstractEcologicalNetwork}\n\nComputes the mutual information of an ecological network. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.n_random_modules-Tuple{Int64}","page":"Public methods","title":"EcologicalNetworks.n_random_modules","text":"n_random_modules(n::Int64)\n\nThis returns a function which, when applied to a network, will randomly assign every species to one of n modules. The correct way to apply this function to a network N is, therefore n_random_modules(4)(N) (with four modules).\n\nReferences\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nestedhierarchymodel-Tuple{Int64,Float64}","page":"Public methods","title":"EcologicalNetworks.nestedhierarchymodel","text":"nestedhierarchymodel(S::Int64, Co::Float64)\n\nConnectance can be provided instead of number of links.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nestedhierarchymodel-Tuple{Int64,Int64}","page":"Public methods","title":"EcologicalNetworks.nestedhierarchymodel","text":"nestedhierarchymodel(S::Int64, L::Int64)\n\nReturn UnipartiteNetwork where resources are assigned to consumers according to the nested hierarchy model for S species and L.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nestedhierarchymodel-Tuple{Tuple}","page":"Public methods","title":"EcologicalNetworks.nestedhierarchymodel","text":"nestedhierarchymodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (Species::Int64, Co::Float64) or (Species::Int64, Int::Int64).\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nestedhierarchymodel-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.nestedhierarchymodel","text":"nestedhierarchymodel(N::T) {T <: UnipartiteNetwork}\n\nApplied to empirical UnipartiteNetwork return its randomized version.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nichemodel-Tuple{Int64,Float64}","page":"Public methods","title":"EcologicalNetworks.nichemodel","text":"nichemodel(S::Int64, C::Float64)\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nichemodel-Tuple{Int64,Int64}","page":"Public methods","title":"EcologicalNetworks.nichemodel","text":"nichemodel(S::Int64, L::Int64)\n\nReturn UnipartiteNetwork where resources are assign to consumers according to niche model for a network of S species and L links.\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nichemodel-Tuple{Tuple}","page":"Public methods","title":"EcologicalNetworks.nichemodel","text":"nichemodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (Species::Int64, Co::Float64) or (Species::Int64, Int::Int64).\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nichemodel-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.nichemodel","text":"nichemodel(N::T) where {T <: UnipartiteNetwork}\n\nApplied to empirical UnipartiteNetwork return its randomized version.\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nodf-Tuple{T} where T<:Union{BipartiteNetwork, BipartiteQuantitativeNetwork}","page":"Public methods","title":"EcologicalNetworks.nodf","text":"nodf(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: Union{BipartiteNetwork,BipartiteQuantitativeNetwork}}\n\nReturns nodf for a margin of the network. The i argument can be 1 for top-level, 2 for bottom level, and the function will throw an ArgumentError if an invalid value is used. For quantitative networks, WNODF is used.\n\nReferences\n\nAlmeida-Neto, M., Guimarães, P.R., Loyola, R.D., Ulrich, W., 2008. A consistent metric for nestedness analysis in ecological systems: reconciling concept and measurement. Oikos 117, 1227–1239. https://doi.org/10.1111/j.0030-1299.2008.16644.x\n\nAlmeida-Neto, M., Ulrich, W., 2011. A straightforward computational approach for measuring nestedness using quantitative matrices. Environmental Modelling & Software 26, 173–178. https://doi.org/10.1016/j.envsoft.2010.08.003\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nodiagonal!-Tuple{AbstractBipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.nodiagonal!","text":"nodiagonal!(N::AbstractBipartiteNetwork)\n\nDoes nothing.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nodiagonal!-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.nodiagonal!","text":"nodiagonal!(N::AbstractUnipartiteNetwork)\n\nModifies the network so that its diagonal is set to the appropriate zero.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nodiagonal-Tuple{AbstractBipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.nodiagonal","text":"nodiagonal(N::AbstractBipartiteNetwork)\n\nReturns a copy of the network (because the diagonal of a bipartite network is never a meaningful notion). This function is clearly useless, but allows to write general code for all networks types when a step requires removing the diagonal.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.nodiagonal-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.nodiagonal","text":"nodiagonal(N::AbstractUnipartiteNetwork)\n\nReturns a copy of the network with its diagonal set to zero.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.null1-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Public methods","title":"EcologicalNetworks.null1","text":"null1(N::BinaryNetwork)\n\nGiven a network N, null1(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the connectance of N.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nFortuna, M.A., Bascompte, J., 2006. Habitat loss and the structure of plantanimal mutualistic networks. Ecol. Lett. 9, 281–286. https://doi.org/10.1111/j.1461-0248.2005.00868.x\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.null2-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Public methods","title":"EcologicalNetworks.null2","text":"null2(N::BinaryNetwork)\n\nGiven a network N, null2(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nBascompte, J., Jordano, P., Melian, C.J., Olesen, J.M., 2003. The nested assembly of plant-animal mutualistic networks. PNAS 100, 9383–9387. https://doi.org/10.1073/pnas.1633576100\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.null3-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Public methods","title":"EcologicalNetworks.null3","text":"null3(N::BinaryNetwork; dims::Integer=1)\n\nGiven a network N, null3(N) returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (dims=1) or to the in-degree (dims=2, number of predecessors) of each species, divided by the total number of possible predecessors/successors.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nPoisot, T., Stanko, M., Miklisová, D., Morand, S., 2013. Facultative and obligate parasite communities exhibit different network properties. Parasitology 140, 1340–1345. https://doi.org/10.1017/S0031182013000851\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.null4-Tuple{Union{BipartiteNetwork, UnipartiteNetwork}}","page":"Public methods","title":"EcologicalNetworks.null4","text":"null4(N::BinaryNetwork)\n\nGiven a matrix A, null4(A) returns a matrix with the same dimensions, where every interaction happens with a probability equal to the product of the degree of each species.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.number_of_paths-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.number_of_paths","text":"number_of_paths(N::Unipartite; n::Int64=2)\n\nThis returns an array, not a network.\n\nn (def. 2), the path length\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.optimaltransportation-Tuple{AbstractArray}","page":"Public methods","title":"EcologicalNetworks.optimaltransportation","text":"optimaltransportation(M::AbstractArray;\n        [a, b, λ=1, ϵ=1e-10, maxiter=100])\n\nPerforms optimal transportation on an ecological network. Here, M is treated as an utility matrix, quantifying the preference the species of the two throphic levels have for interacting with another. One can fix both, one or none of the species abundances by given a (row sums, corresponding to top species) and/or b (column sums, corresponding to bottom species). The strengh of entropic  regularisation is set by λ, where higher values indicate more utitlity and lower values more entropy. \n\nϵ and maxiter control the number of Sinkhorn iterations. You likely won't need to change these.\n\nThis version works on arrays.\n\nStock, M., Poisot, T., & De Baets, B. (2021). « Optimal transportation theory for species interaction networks. » Ecology and Evolution, 00(1), ece3.7254. https://doi.org/10.1002/ece3.7254\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.optimaltransportation-Tuple{AbstractBipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.optimaltransportation","text":"optimaltransportation(M::AbstractBipartiteNetwork;\n        [a, b, λ=1, ϵ=1e-10, maxiter=100])\n\nPerforms optimal transportation on an ecological network. Here, M is treated as an utility matrix, quantifying the preference the species of the two throphic levels have for interacting with another. One can fix both, one or none of the species abundances by given a (row sums, corresponding to top species) and/or b (column sums, corresponding to bottom species). The strengh of entropic  regularisation is set by λ, where higher values indicate more utitlity and lower values more entropy. \n\nϵ and maxiter control the number of Sinkhorn iterations. You likely won't need to change these.\n\nStock, M., Poisot, T., & De Baets, B. (2021). « Optimal transportation theory for species interaction networks. » Ecology and Evolution, 00(1), ece3.7254. https://doi.org/10.1002/ece3.7254\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.overlap-Tuple{T} where T<:BipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.overlap","text":"overlap(N::T; dims=dims::Union{Nothing,Integer}=nothing) where {T <: BipartiteNetwork}\n\nReturns the overlap graph for a bipartite network. The dims keyword argument can be 1 (default; overlap between top-level species) or 2 (overlap between bottom-level species). See the documentation for ?overlap for the output format.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.overlap-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.overlap","text":"overlap(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nReturns the overlap graph for a unipartite network. The dims keyword argument can be 1 (overlap based on preys) or 2 (overlap based on predators), or nothing (default; overlap based on both predators and preys). The overlap is returned as a vector of named tuples, with elements pair (a tuple of species names), and overlap (the number of shared interactors). The ordering within the pair of species is unimportant, since overlap graphs are symetrical.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.potential_information-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.potential_information","text":"potential_information(N::NT; [dims])\n\nComputes the maximal potential information in a network, corresponding to every species interacting with every other species. Compute result for the marginals using the optional parameter dims. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.rdpg-Union{Tuple{T}, Tuple{T,Integer}} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.rdpg","text":"svd_truncated(N::BinaryNetwork, rnk::Integer=3)\n\nGiven a binary network N which adjacency matrix A is of dimension n × m, svd_truncated(A) returns two matrices, Left and Right, with dimensions respectively n × rank and rank × m, corresponding to the species representation in the network N's RDPG space of rank rank.\n\nThe singular value decomposition is computed using LinearAlgebra's svd, obtaining\n\nA = U * Diagonal(S) * V = U * Diagonal(√S) * Diagonal(√S) * V.\n\nThe truncation preserves the first rank columns of U * Diagonal(√S) and the first rank rows Diagonal(√S) * V.\n\nWe have that, A ≃ Left * Right (and the approximation is optimal in a specified meaning).\n\nReferences\n\nDalla Riva, G.V. and Stouffer, D.B., 2016. Exploring the evolutionary signature of food webs' backbones using functional traits. Oikos, 125(4), pp.446-456. https://doi.org/10.1111/oik.02305\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.resilience-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.resilience","text":"resilience(N::AbstractUnipartiteNetwork)\n\nA resilience parameters described by Gao et al. (2016). It is a global parameters describing the dynamics of an unipartite network as an effective 1D equation of the form\n\nf(xeff) = F(xeff) + βeff G(xeff, xeff)\n\ni.e. describing a second-order term representing the effect of the network on the dynamics of the 'effective state' xeff of the system.\n\nGoa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.richness-Tuple{AbstractEcologicalNetwork}","page":"Public methods","title":"EcologicalNetworks.richness","text":"richness(N::AbstractEcologicalNetwork, i::Int64)\n\nReturns the number of species on either side of the network. The value of i can be 1 (top-level species) or 2 (bottom-level species), as in the species function.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.s-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.s","text":"s(N::AbstractUnipartiteNetwork; dims::Union{Nothing,Integer}=nothing)\n\nComputes the average weighted degree. This is proportional to the (weighted) density of interactions.\n\nIf dims is provided, the incoming (dims=1) or outgoing (dims=2) is computed.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.salp-Tuple{T} where T<:BipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.salp","text":"salp(N::T; θ::Float64=1.0, steps::Int64=10_000, λ::Float64=0.999, progress::Bool=false) where {T <: BipartiteNetwork}\n\nLabel-propagation using simulated annealing. This function uses simulated annealing to propagate labels from neighboring nodes. It accepts a network as input. The schedule of the simulated annealing is linear: at step k+1, the temperature is θλᵏ. The initial temperature has been picked so that after 100 timesteps, using the default λ, a move decreasing modularity by 0.05 (20% of the theoretical maximum) is picked with a probability of 0.1.\n\nOptional arguments regulating the behavior of the simulated annealing routine are:\n\nλ=0.999, the rate of temperature decay\nθ=0.002, the initial temperature\nsteps=10_000, the number of annealing steps to perform\nprogress=false, whether to display an info message every 100 timesteps\n\nThe θ parameter can be picked using the following method: if we want to allow a maximal loss of modularity of δ, after timestep k, with a decay parameter λ, with a probability P, then θ = -δ/[λᵏ×ln(P)]⁻¹. By beibg more or less restrictive on these parameters, the user can pick a value of θ for every problem.\n\nThis function can work as a first step (like lp), but in explorations during the development of the package, we found that brim was rarely (if ever) able to optmize the output further. It can therefore be used on its own.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.shortest_path-Tuple{UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.shortest_path","text":"shortest_path(N::UnipartiteNetwork; nmax::Int64=50)\n\nThis is not an optimal algorithm at all, but it will do given that most ecological networks are relatively small. The optional nmax argument is the longest shortest path length you will look for.\n\nIn ecological networks, the longest shortest path tends not to be very long, so any value above 10 is probably overdoing it. Note that the default value is 50, which is above 10.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.shortest_path-Tuple{UnipartiteQuantitativeNetwork}","page":"Public methods","title":"EcologicalNetworks.shortest_path","text":"shortest_path(N::UnipartiteQuantiNetwork; nmax::Int64=50)\n\nThis function will remove quantitative information, then measure the shortest path length.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify!-Tuple{T} where T<:BipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.simplify!","text":"simplify!{T<:BipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify!-Tuple{T} where T<:BipartiteProbabilisticNetwork","page":"Public methods","title":"EcologicalNetworks.simplify!","text":"simplify!{T<:BipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify!-Tuple{T} where T<:BipartiteQuantitativeNetwork","page":"Public methods","title":"EcologicalNetworks.simplify!","text":"simplify!{T<:BipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify!-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.simplify!","text":"simplify!(N::UnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify!-Tuple{T} where T<:UnipartiteProbabilisticNetwork","page":"Public methods","title":"EcologicalNetworks.simplify!","text":"simplify!(N::UnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify!-Tuple{T} where T<:UnipartiteQuantitativeNetwork","page":"Public methods","title":"EcologicalNetworks.simplify!","text":"simplify!(N::UnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.simplify-Tuple{T} where T<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.simplify","text":"simplify(N::T) where {T<:AbstractEcoloigcalNetwork}\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.species-Tuple{AbstractBipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.species","text":"species(N::AbstractBipartiteNetwork)\n\nReturns an array of all species in a bipartite network. The order of the species corresponds to the order of rows (top level) and columns (bottom level) of the adjacency matrix, in this order.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.species-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.species","text":"species(N::AbstractUnipartiteNetwork; dims::Int64=1)\n\nReturns an array of species on either side of a unipartite network. In a unipartite network, species are the same on either size. This function is nevertheless useful when you want to write code that takes either side of the network in a general way.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.specificity-Tuple{Union{BipartiteNetwork, BipartiteQuantitativeNetwork, UnipartiteNetwork, UnipartiteQuantitativeNetwork}}","page":"Public methods","title":"EcologicalNetworks.specificity","text":"specificity(N::DeterministicNetwork)\n\nMeasure of specificity in a deterministic network. This returns a value between 0 and 1, where 1 indicates maximal specificity.\n\nReferences\n\nPoisot, T., Bever, J.D., Nemri, A., Thrall, P.H., Hochberg, M.E., 2011. A conceptual framework for the evolution of ecological specialisation. Ecol. Lett. 14, 841–851. https://doi.org/10.1111/j.1461-0248.2011.01645.x\nPoisot, T., Canard, E., Mouquet, N., Hochberg, M.E., 2012. A comparative study of ecological specialization estimators. Methods in Ecology and Evolution 3, 537–544. https://doi.org/10.1111/j.2041-210X.2011.00174.x\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.symmetry-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.symmetry","text":"symmetry(N::AbstractUnipartiteNetwork)\n\nComputes the symmetry between s^in and s^out (the in- and outgoing weighted degree of an unipartite network). This is computed as the Pearson correlation between the s^in and s^out. It is hence a value between -1 and 1, where high positive values indicate that species with many outgoing degrees tend to have many ingoing degrees and negative values mean the opposite. An undirected network is perfectly symmetric but, for example, a food web where predators are less likely to be prey would have a negative symmetry.\n\nGoa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.unipartitemotifs-Tuple{}","page":"Public methods","title":"EcologicalNetworks.unipartitemotifs","text":"unipartitemotifs()\n\nThe names of the motifs come from Stouffer et al. (2007) – especially Fig. 1, available online at http://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only\n\nThe motifs are returned as a named tuple, with every motif identified by its name in the original publication. The species are named :a. :b, and :c.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.variation_information-Tuple{AbstractArray}","page":"Public methods","title":"EcologicalNetworks.variation_information","text":"variation_information(P::AbstractArray)\n\nComputes the variation of information of a double stochastic matrix. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.variation_information-Tuple{NT} where NT<:AbstractEcologicalNetwork","page":"Public methods","title":"EcologicalNetworks.variation_information","text":"variation_information(N::AbstractEcologicalNetwork)\n\nComputes the variation of information of an ecological network. Output in bits.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.βos-Union{Tuple{T}, Tuple{T,T}} where T<:BipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.βos","text":"βos(X::T, Y::T) where {T<:BipartiteNetwork}\n\nOverlapping species (bipartite)\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.βos-Union{Tuple{T}, Tuple{T,T}} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.βos","text":"βos(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nOverlapping species (unipartite)\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.βs-Union{Tuple{T}, Tuple{T,T}} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.βs","text":"βs(X::T, Y::T; dims::Union{Nothing,Integer}=nothing) where {T<:BinaryNetwork}\n\nComponents of β-diversity as measured on species.\n\nReferences\n\nKoleff, P., Gaston, K.J., Lennon, J.J., 2003. Measuring beta diversity for presence–absence data. Journal of Animal Ecology 72, 367–382. https://doi.org/10.1046/j.1365-2656.2003.00710.x\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.βwn-Union{Tuple{T}, Tuple{T,T}} where T<:Union{BipartiteNetwork, UnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.βwn","text":"βwn(X::T, Y::T) where {T<:BinaryNetwork}\n\nWhole network\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.η-Tuple{T} where T<:Union{BipartiteNetwork, BipartiteProbabilisticNetwork}","page":"Public methods","title":"EcologicalNetworks.η","text":"η(N::T, dims::Union{Nothing,Integer}=nothing) where {T <: Union{BipartiteNetwork, BipartiteProbaNetwork}}\n\nReturns the nestedness of a margin of the network, using η. The second argument can be 1 (for nestedness of rows/top level) or 2 (for nestedness of columns/bottom level). Leaving it at nothing will measure the nestedness of the entire network.\n\nReferences\n\nBastolla, U., Fortuna, M.A., Pascual-García, A., Ferrera, A., Luque, B., Bascompte, J., 2009. The architecture of mutualistic networks minimizes competition and increases biodiversity. Nature 458, 1018–1020. https://doi.org/10.1038/nature07950\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.ρ-Tuple{T} where T<:BipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.ρ","text":"ρ(N::T; varargs...) where {T <: BipartiteNetwork}\n\nBipartite version of the spectral radius. In practice, this casts the network into its unipartite representation, since the spectral radius only makes sense for square matrices.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.ρ-Tuple{T} where T<:UnipartiteNetwork","page":"Public methods","title":"EcologicalNetworks.ρ","text":"ρ(N::T; range=EcologicalNetworks.ρ_ska) where {T <: UnipartiteNetwork}\n\nReturns the spectral radius (the absolute value of the largest real part of the eigenvalues of the adjacency matrix) of any unipartite network whose interactions are positive or null. The spectral radius is measured on the mirrored version of the matrix, so that an interaction from i to j also implies an interaction from j to i.\n\nNote that the spectral radius has been suggested as a measure of nestedness by Staniczenko et al. (2013). Phillips (2011) uses it as a measure of the ability of a system to dampen or absorb perturbations.\n\nMaximal values\n\nThe spectral radius is sensitive to network size, and to a certain extent to the number of links. The keyword argument range will divide return a ranged version of the spectral radius, so that it is expressed relatively to its maximal value. The range argument takes a function, which requires two arguments: the network (which must be unipartite), and the value of the spectral radius.\n\nOptions that come with EcologicalNetworks.jl (where L is the number of links and S the number of nodes) are:\n\nEcologicalNetworks.ρ_phillips: divides by the square root of (2L(S-1))/S, as in Phillips (20110)\nEcologicalNetworks.ρ_ska: divides by the square root of L, as in Staniczenko et al. (2013) - this is the default, and has an upper bound of the square root of the number of links\nEcologicalNetworks.ρ_raw: returns the raw value\n\nReferences\n\nPhillips, J.D., 2011. The structure of ecological state transitions: Amplification, synchronization, and constraints in responses to environmental change. Ecological Complexity, 8, 336–346. https://doi.org/10.1016/j.ecocom.2011.07.004\nStaniczenko, P.P.A., Kopp, J.C., Allesina, S., 2013. The ghost of nestedness in ecological networks. Nat Commun 4, 1391. https://doi.org/10.1038/ncomms2422\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.σ_in-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.σ_in","text":"σ_in(N::AbstractUnipartiteNetwork)\n\nComputes the standard deviation of the ingoing weighted degree of an unipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworks.σ_out-Tuple{AbstractUnipartiteNetwork}","page":"Public methods","title":"EcologicalNetworks.σ_out","text":"σ_out(N::AbstractUnipartiteNetwork)\n\nComputes the standard deviation of the outgoing weighted degree of an unipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#StatsBase.sample-Union{Tuple{T}, Tuple{T,Int64}} where T<:AbstractBipartiteNetwork","page":"Public methods","title":"StatsBase.sample","text":"sample(N::T, n::Int64) where {T<:AbstractBipartiteNetwork}\n\nSame thing as sample but with a single species number, to return a bipartite network of equal richness on both sides. This is not a very good way to sample a bipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#StatsBase.sample-Union{Tuple{T}, Tuple{T,Int64}} where T<:AbstractUnipartiteNetwork","page":"Public methods","title":"StatsBase.sample","text":"sample(N::T, n::Int64) where {T<:AbstractUnipartiteNetwork}\n\nSamples a sub-network from a unipartite network. n is the number of species to have in the sampled network. This functions makes no attempt to ensure that the network is not degenerate, or even has a single interaction. This is the recommended way to sample a unipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#StatsBase.sample-Union{Tuple{T}, Tuple{T,Tuple{Int64,Int64}}} where T<:AbstractBipartiteNetwork","page":"Public methods","title":"StatsBase.sample","text":"sample(N::T, n::Tuple{Int64,Int64}) where {T<:AbstractBipartiteNetwork}\n\nSamples a sub-network from a bipartite network. n is the size of the network to return, i.e. number of top and bottom species. This functions makes no attempt to ensure that the network is not degenerate, or even has a single interaction.\n\nThis is the recommended way to sample a bipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#StatsBase.sample-Union{Tuple{T}, Tuple{T,Tuple{Int64,Int64}}} where T<:AbstractUnipartiteNetwork","page":"Public methods","title":"StatsBase.sample","text":"sample(N::T, n::Tuple{Int64,Int64}) where {T<:AbstractUnipartiteNetwork}\n\nSame as sample but called with (n,n) instead of a species number. Note that this will fail if the size requested is not square. This is not a really good way to sample a unipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#StatsBase.sample-Union{Tuple{T}, Tuple{T,Tuple{Int64}}} where T<:AbstractBipartiteNetwork","page":"Public methods","title":"StatsBase.sample","text":"sample(N::T, n::Tuple{Int64}) where {T<:AbstractBipartiteNetwork}\n\nSame as sample but with a single species number given as (n,), to return a bipartite network of equal richness on both sides. This is not a very good way to sample a bipartite network.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#StatsBase.sample-Union{Tuple{T}, Tuple{T,Tuple{Int64}}} where T<:AbstractUnipartiteNetwork","page":"Public methods","title":"StatsBase.sample","text":"sample(N::T, n::Tuple{Int64}) where {T<:AbstractUnipartiteNetwork}\n\nSame as sample, but work when called with (n,) instead of a species number. This is an accepted way to sample a unipartite network.\n\n\n\n\n\n","category":"method"},{"location":"interface/abstractarray/","page":"AbstractArray","title":"AbstractArray","text":"Networks are following the AbstractArray interface rather closely, with some additional functionalities to get at interactions by using species names rather than networks positions.","category":"page"},{"location":"interface/abstractarray/#Accessing-elements","page":"AbstractArray","title":"Accessing elements","text":"","category":"section"},{"location":"interface/abstractarray/","page":"AbstractArray","title":"AbstractArray","text":"getindex","category":"page"},{"location":"interface/abstractarray/#Base.getindex","page":"AbstractArray","title":"Base.getindex","text":"getindex(N::AbstractEcologicalNetwork, i::T, j::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex(N::AbstractEcologicalNetwork, i::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex(N::AbstractEcologicalNetwork, ::Colon, j::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex(N::AbstractEcologicalNetwork, i::T, ::Colon)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex{T}(N::AbstractEcologicalNetwork, s1::T, s2::T)\n\nGet the value of an interaction based on the name of the species. This is the recommended way to look for things in a network.\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, ::Colon, sp::T)\n\nGets the predecessors (i.e. species that interacts with / consume) of a focal species. This returns the list of species as a Set object, in which ordering is unimportant.\n\n\n\n\n\ngetindex{T}(N::AbstractEcologicalNetwork, sp::T, ::Colon)\n\nGets the successors (i.e. species that are interacted with / consumed) of a focal species. This returns the list of species as a Set object, in which ordering is unimportant.\n\n\n\n\n\ngetindex{T}(N::AbstractUnipartiteNetwork, sp::Array{T})\n\nInduce a unipartite network based on a list of species, all of which must be in the original network. This function takes a single argument (as opposed to two arrays, or an array and a colon) to ensure that the returned network is unipartite.\n\nThe network which is returned by this function may not have the species in the order specified by the user for performance reasons.\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, ::Colon, sp::Array{T})\n\nTODO\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, sp::Array{T}, ::Colon)\n\nTODO\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, sp1::Array{T}, sp2::Array{T})\n\nTODO\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, sp1::Array{T}, sp2::Array{T})\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"interface/abstractarray/#Changing-elements","page":"AbstractArray","title":"Changing elements","text":"","category":"section"},{"location":"interface/abstractarray/","page":"AbstractArray","title":"AbstractArray","text":"The ecological networks types are all mutable.","category":"page"},{"location":"interface/abstractarray/","page":"AbstractArray","title":"AbstractArray","text":"setindex!","category":"page"},{"location":"interface/abstractarray/#Base.setindex!","page":"AbstractArray","title":"Base.setindex!","text":"setindex!(N::T, A::Any, i::E, j::E) where {T <: AbstractEcologicalNetwork, E}\n\nChanges the value of the interaction at the specificied position, where i and j are species names. Note that this operation changes the network.\n\n\n\n\n\nsetindex!(N::T, A::K, i::E, j::E) where {T <: AbstractEcologicalNetwork, K <: _interaction_type(N), E <: Int}\n\nChanges the value of the interaction at the specificied position, where i and j are species positions. Note that this operation changes the network.\n\n\n\n\n\n","category":"function"},{"location":"interface/abstractarray/#Network-size","page":"AbstractArray","title":"Network size","text":"","category":"section"},{"location":"interface/abstractarray/","page":"AbstractArray","title":"AbstractArray","text":"size","category":"page"},{"location":"interface/abstractarray/#Base.size","page":"AbstractArray","title":"Base.size","text":"size(N::AbstractEcologicalNetwork)\n\nReturn the size of the adjacency matrix of an AbstractEcologicalNetwork object.\n\n\n\n\n\nsize(N::AbstractEcologicalNetwork, i::Int64)\n\nReturn the size of the adjacency matrix of an AbstractEcologicalNetwork object.\n\n\n\n\n\n","category":"function"},{"location":"random/structure/#Structural-network-models","page":"Structural models","title":"Structural network models","text":"","category":"section"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Structure of ecological networks is non-random. Network architecture can have a strong effect on important ecosystem properties (Mougi and Kondoh 2012, Thébault and Fontaine 2010). Many of the structural features of food-webs can be simulated using small number of simple rules. Despite this simplicity these models can often accurately reproduce some of the second order characteristics of empirical food-webs (Stouffer et al. 2005). These characteristics of phenomenological stochastic models allow for their wide applications e.g. to simulate biomass dynamics using dynamical models or study extinction cascades.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Mougi, A. and Kondoh, M. (2012) ‘Diversity of Interaction Types and","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Ecological Community Stability’, Science, 337(6092), pp. 349–351. doi: 10.1126/science.1220529.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Thébault, E. and Fontaine, C. (2010) ‘Stability of Ecological Communities","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"and the Architecture of Mutualistic and Trophic Networks’, Science, 329(5993), pp. 853–856. doi: 10.1126/science.1188321.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Stouffer, D. B. et al. (2005) ‘Quantitative Patterns in the Structure","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"of Model and Empirical Food Webs’, Ecology, 86(5), pp. 1301–1311. doi: 10.1890/04-0957.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Many models with various interactions assignment algorithms have been proposed. EcologicalNetworks provides functions to generate random ecological networks of the UnipartiteNetwork type. Listed below are those most often used in ecological studies.","category":"page"},{"location":"random/structure/#Cascade-model","page":"Structural models","title":"Cascade model","text":"","category":"section"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"This model uses one abstract trophic trait. For any given consumer links can be randomly assigned to a resource species with the trait value smaller than that of a consumer.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"cascademodel","category":"page"},{"location":"random/structure/#EcologicalNetworks.cascademodel","page":"Structural models","title":"EcologicalNetworks.cascademodel","text":"cascademodel(S::Int64, Co::Float64)\n\nReturn matrix of the type UnipartiteNetwork randomly assembled according to the cascade model for a given nuber of S and connectivity Co.\n\nSee also: nichemodel, mpnmodel, nestedhierarchymodel\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\ncascademodel(N::T) where {T <: UnipartiteNetwork}\n\nApplied to a UnipartiteNetwork return its randomized version.\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\ncascademodel(S::Int64, L::Int64)\n\nNumber of links can be specified instead of connectance.\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\ncascademodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (S::Int64, Co::Float64) or (S::Int64, L::Int64).\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\n","category":"function"},{"location":"random/structure/#Niche-model","page":"Structural models","title":"Niche model","text":"","category":"section"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"Niche model extended cascade model by introducing ranges for each consumer. In this model consumers can predate on resources which trait values are within the predators' 'niche' range.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"nichemodel","category":"page"},{"location":"random/structure/#EcologicalNetworks.nichemodel","page":"Structural models","title":"EcologicalNetworks.nichemodel","text":"nichemodel(S::Int64, L::Int64)\n\nReturn UnipartiteNetwork where resources are assign to consumers according to niche model for a network of S species and L links.\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\nnichemodel(N::T) where {T <: UnipartiteNetwork}\n\nApplied to empirical UnipartiteNetwork return its randomized version.\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\nnichemodel(S::Int64, C::Float64)\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\nnichemodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (Species::Int64, Co::Float64) or (Species::Int64, Int::Int64).\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\n","category":"function"},{"location":"random/structure/#Nested-hierarchy-model","page":"Structural models","title":"Nested hierarchy model","text":"","category":"section"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"In order to reproduce more faithfully properties of complex and multidimensional natural nested hierarchy model tries to use simple rules to incorporate also the phylogenetic similarity in resource composition of predators.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"nestedhierarchymodel","category":"page"},{"location":"random/structure/#EcologicalNetworks.nestedhierarchymodel","page":"Structural models","title":"EcologicalNetworks.nestedhierarchymodel","text":"nestedhierarchymodel(S::Int64, L::Int64)\n\nReturn UnipartiteNetwork where resources are assigned to consumers according to the nested hierarchy model for S species and L.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\nnestedhierarchymodel(S::Int64, Co::Float64)\n\nConnectance can be provided instead of number of links.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\nnestedhierarchymodel(N::T) {T <: UnipartiteNetwork}\n\nApplied to empirical UnipartiteNetwork return its randomized version.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\nnestedhierarchymodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (Species::Int64, Co::Float64) or (Species::Int64, Int::Int64).\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\n","category":"function"},{"location":"random/structure/#Minimum-potential-niche-model","page":"Structural models","title":"Minimum potential niche model","text":"","category":"section"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"This model attempts to explicitly simulate forbidden links in empirical food webs.","category":"page"},{"location":"random/structure/","page":"Structural models","title":"Structural models","text":"mpnmodel","category":"page"},{"location":"random/structure/#EcologicalNetworks.mpnmodel","page":"Structural models","title":"EcologicalNetworks.mpnmodel","text":"mpnmodel(S::Int64, Co::Float64, forbidden::Float64)\n\nReturn UnipartiteNetwork with links assigned according to minimum potential niche model for given number of S, connectivity Co and probability of forbidden link occurence.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\nmpnmodel(N::T) where {T<: UnipartiteNetwork}\n\nApplied to UnipartiteNetwork return its randomized version.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\nmpnmodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (S::Int64, Co::Float64, forbidden::Float64).\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\nmpnmodel(mpnmodel(S::Int64, L::Int64, forbidden::Float64))\n\nAverage number of links can be specified instead of connectance.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\n","category":"function"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"In this illustration, we will simulate extinctions of hosts, to show how the package can be extended by using the core functions described in the \"Interface\" section. Simply put, the goal of this example is to write a function to randomly remove one host species, remove all parasite species that end up not connected to a host, and measuring the effect of these extinctions on the remaining network. Rather than measuring the network structure in the function, we will return an array of networks to be manipulated later:","category":"page"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"using EcologicalNetworks\nusing Plots\nusing Plots.PlotMeasures\nusing Statistics","category":"page"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"function extinctions(N::T) where {T <: AbstractBipartiteNetwork}\n\n  # We start by making a copy of the network to extinguish\n  Y = [copy(N)]\n\n  # While there is at least one species remaining...\n  while richness(last(Y)) > 1\n    # We remove one species randomly\n    remain = sample(species(last(Y); dims=2), richness(last(Y); dims=2)-1, replace=false)\n\n    # Remaining species\n    R = last(Y)[:,remain]\n    simplify!(R)\n\n    # Then add the simplified network (without the extinct species) to our collection\n    push!(Y, copy(R))\n  end\n  return Y\nend","category":"page"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"One classical analysis is to remove host species, and count the richness of parasite species, to measure their robustness to host extinctions – this is usually done with multiple scenarios for order of extinction, but we will focus on the random order here. Even though EcologicalNetworks has a built-in function for richness, we can write a small wrapper around it:","category":"page"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"function parasite_richness(N::T) where {T<:BinaryNetwork}\n  return richness(N; dims=1)\nend","category":"page"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"Writing multiple functions that take a single argument allows to chain them in a very expressive way: for example, measuring the richness on all timesteps in a simulation is N |> extinctions .|> parasite_richness, or alternatively, parasite_richness.(extinctions(N)). In @fig:extinctions, we illustrate the output of this analysis on 100 simulations (average and standard deviation) for one of the networks.","category":"page"},{"location":"examples/extinctions/","page":"Extinctions","title":"Extinctions","text":"N = convert(BinaryNetwork, web_of_life(\"A_HP_050\"))\n\nX = Float64[]\nY = Float64[]\nfor i in 1:200\n  timeseries = extinctions(N)\n  path_l = parasite_richness.(timeseries)./richness(N; dims=1)\n  prop_r = 1.0.-richness.(timeseries; dims=2)./richness(N; dims=2)\n  append!(X, prop_r)\n  append!(Y, path_l)\nend\nx = sort(unique(X))\ny = zeros(Float64, length(x))\nsy = zeros(Float64, length(x))\nfor (i, tx) in enumerate(x)\n  y[i] = mean(Y[X.==tx])\n  sy[i] = std(Y[X.==tx])\nend\n\npl = plot(x, y, ribbon=sy, c=:black, fill=(:lightgrey), lw=2, ls=:dash, leg=false, margin = 10mm, grid=false, frame=:origin, xlim=(0,1), ylim=(0,1))\nxaxis!(pl, \"Proportion of hosts removed\")","category":"page"},{"location":"properties/modularity/#Modularity","page":"Modularity","title":"Modularity","text":"","category":"section"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"The analysis of network modularity is done in three steps:","category":"page"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"generate a starting point, using one of the starter functions\noptimize modularity\nanalyse the output","category":"page"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"All starter functions take a network as input, and return a tuple of this network and a dictionary where every species maps onto its module. This forms the input of all other modularity related functions.","category":"page"},{"location":"properties/modularity/#Measures","page":"Modularity","title":"Measures","text":"","category":"section"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"Q\nQr","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.Q","page":"Modularity","title":"EcologicalNetworks.Q","text":"Q(N::T, L::Dict{E,Int64}) where {T<:AbstractEcologicalNetwork,E}\n\nModularity of a network and its partition. The second argument is a dictionary where every species of N is associated to an Int64 value representing the identity of the module. This function returns the same value of bipartite networks and their unipartite projection.\n\nReferences\n\nBarber, M.J., 2007. Modularity and community detection in bipartite networks. Phys. Rev. E 76, 066102. https://doi.org/10.1103/PhysRevE.76.066102\nNewman, M.E., 2006. Modularity and community structure in networks. Proceedings of the national academy of sciences 103, 8577–8582.\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.Qr","page":"Modularity","title":"EcologicalNetworks.Qr","text":"Qr(N::T, L::Dict{E,Int64}) where {T<:AbstractEcologicalNetwork,E}\n\nRealized modularity – this function returns a value giving the proportion of all links that are within the same module. Higher values reflect a more strongly modular partition (whereas Q represents the deviation of modularity from the random expectation).\n\nReferences\n\nPoisot, T., 2013. An a posteriori measure of network modularity. F1000Research\nhttps://doi.org/10.12688/f1000research.2-130.v3\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Starters","page":"Modularity","title":"Starters","text":"","category":"section"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"n_random_modules\neach_species_its_module\nlp","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.n_random_modules","page":"Modularity","title":"EcologicalNetworks.n_random_modules","text":"n_random_modules(n::Int64)\n\nThis returns a function which, when applied to a network, will randomly assign every species to one of n modules. The correct way to apply this function to a network N is, therefore n_random_modules(4)(N) (with four modules).\n\nReferences\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.each_species_its_module","page":"Modularity","title":"EcologicalNetworks.each_species_its_module","text":"each_species_its_module(N::T) where {T<:AbstractEcologicalNetwork}\n\nReturns a dictionary in which each species is its own module. This is used as a starting point for lp and salp internally. This is often a very poor starting point for brim, and should probably not be used on its own.\n\nReferences\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.lp","page":"Modularity","title":"EcologicalNetworks.lp","text":"lp(N::T) where {T<:AbstractEcologicalNetwork}\n\nUses label propagation to generate a first approximation of the modular structure of a network. This is usually followed by the BRIM (brim) method. This method supposedly performs better for large graphs, but we rarely observed any differences between it and variations of BRIM alone on smaller graphs.\n\nReferences\n\nLiu, X., Murata, T., 2009. Community Detection in Large-Scale Bipartite Networks, in: 2009 IEEE/WIC/ACM International Joint Conference on Web Intelligence and Intelligent Agent Technology. Institute of Electrical & Electronics Engineers (IEEE). https://doi.org/10.1109/wi-iat.2009.15\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Optimizers","page":"Modularity","title":"Optimizers","text":"","category":"section"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"brim\nsalp","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.brim","page":"Modularity","title":"EcologicalNetworks.brim","text":"brim(N::NT, L::Dict{E,Int64}) where {NT<:AbstractEcologicalNetwork,E}\n\nUses BRIM to optimize the modularity of an ecological network. The L argument is a dictionary mapping every species in the network to its module. This function returns a tuple of the network and its module assignment.\n\nReferences\n\nBarber, M.J., 2007. Modularity and community detection in bipartite networks. Phys. Rev. E 76, 066102. https://doi.org/10.1103/PhysRevE.76.066102\nNewman, M.E., 2006. Modularity and community structure in networks. Proceedings of the national academy of sciences 103, 8577–8582.\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.salp","page":"Modularity","title":"EcologicalNetworks.salp","text":"salp(N::T; θ::Float64=1.0, steps::Int64=10_000, λ::Float64=0.999, progress::Bool=false) where {T <: BipartiteNetwork}\n\nLabel-propagation using simulated annealing. This function uses simulated annealing to propagate labels from neighboring nodes. It accepts a network as input. The schedule of the simulated annealing is linear: at step k+1, the temperature is θλᵏ. The initial temperature has been picked so that after 100 timesteps, using the default λ, a move decreasing modularity by 0.05 (20% of the theoretical maximum) is picked with a probability of 0.1.\n\nOptional arguments regulating the behavior of the simulated annealing routine are:\n\nλ=0.999, the rate of temperature decay\nθ=0.002, the initial temperature\nsteps=10_000, the number of annealing steps to perform\nprogress=false, whether to display an info message every 100 timesteps\n\nThe θ parameter can be picked using the following method: if we want to allow a maximal loss of modularity of δ, after timestep k, with a decay parameter λ, with a probability P, then θ = -δ/[λᵏ×ln(P)]⁻¹. By beibg more or less restrictive on these parameters, the user can pick a value of θ for every problem.\n\nThis function can work as a first step (like lp), but in explorations during the development of the package, we found that brim was rarely (if ever) able to optmize the output further. It can therefore be used on its own.\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Functional-roles","page":"Modularity","title":"Functional roles","text":"","category":"section"},{"location":"properties/modularity/","page":"Modularity","title":"Modularity","text":"functional_cartography","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.functional_cartography","page":"Modularity","title":"EcologicalNetworks.functional_cartography","text":"functional_cartography(N::T, L::Dict{E,Int64}) where {T<:BinaryNetwork, E}\n\nThis function will take the output of a modularity analysis (i.e. a network and a partition), and return a dictionary where every species is associated to its functional role, as defined in Olesen et al (2005). The first element is the within-module degree z-score, and the second is the participation coefficient.\n\nReferences\n\nGuimerà, R., Amaral, L.A.N., 2005. Cartography of complex networks: modules and universal roles. Journal of Statistical Mechanics: Theory and Experiment 2005, P02001. https://doi.org/10.1088/1742-5468/2005/02/P02001\n\nGuimerà, R., Nunes Amaral, L.A., 2005. Functional cartography of complex metabolic networks. Nature 433, 895–900. https://doi.org/10.1038/nature03288\n\nOlesen, J.M., Bascompte, J., Dupont, Y.L., Jordano, P., 2007. The modularity of pollination networks. Proceedings of the National Academy of Sciences 104, 19891–19896. https://doi.org/10.1073/pnas.0706375104\n\n\n\n\n\n","category":"function"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"In this section, we will measure the dissimilarity between bipartite host-parasite networks.","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"using EcologicalNetworks\nusing Plots\nusing Plots.PlotMeasures","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"We use networks that span the entirety of Eurasia. Because these networks are originally quantitative, we will remove the information on interaction strength using convert. Note that we convert to an union type (BinaryNetwork) – the convert function will select the appropriate network type to return based on the partiteness. The core operations on sets (union, diff, and intersect) are implemented for the BinaryNetwork type. As such, generating the \"metaweb\" (i.e. the list of all species and all interactions in the complete dataset) is:","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"all_hp_data = filter(x -> occursin(\"Hadfield\", x.Reference), web_of_life());\nids = getfield.(all_hp_data, :ID);\nnetworks = convert.(BinaryNetwork, web_of_life.(ids));\nmetaweb = reduce(union, networks)","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"From this metaweb, we can measure beta_OS, i.e. the dissimilarity of every network to the expectation in the metaweb. Measuring the distance between two networks is done in two steps. Dissimilarity is first partitioned into three components (common elements, and elements unique to both samples), then the value is measured based on the cardinality of these components. The functions to generate the partitions are βos (dissimilarity of interactions between shared species), βs (dissimilarity of species composition), and βwn (whole network dissimilarity). The output of these functions is passed to one of the functions to measure the actual β-diversity.","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"βcomponents = [βos(metaweb, n) for n in networks];\nβosprime = KGL02.(βcomponents);","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"Finally, we measure the pairwise distance between all networks (because we use a symmetric measure, we only need ntimes(n-1) distances):","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"S, OS, WN = Float64[], Float64[], Float64[]\nfor i in 1:(length(networks)-1)\n  for j in (i+1):length(networks)\n    push!(S, KGL02(βs(networks[i], networks[j])))\n    push!(OS, KGL02(βos(networks[i], networks[j])))\n    push!(WN, KGL02(βwn(networks[i], networks[j])))\n  end\nend","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"We can now visualize these data:","category":"page"},{"location":"examples/beta-diversity/","page":"Network beta-diversity","title":"Network beta-diversity","text":"p1 = histogram(βosprime, frame=:origin, bins=20, c=:white, leg=false, grid=false, margin=10mm)\nxaxis!(p1, \"Difference to metaweb\", (0,1))\nyaxis!(p1, (0,10))\n\np2 = plot([0,1],[0,1], c=:grey, ls=:dash, frame=:origin, grid=false, lab=\"\", legend=:bottomleft, margin=10mm)\nscatter!(p2, S, OS, mc=:black, lab=\"shared sp.\", msw=0.0)\nscatter!(p2, S, WN, mc=:lightgrey, lab=\"all sp.\", msw=0.0, m=:diamond)\nxaxis!(p2, \"Species dissimilarity\", (0,1))\nyaxis!(p2, \"Network dissimilarity\", (0,1))\n\nplot(p1,p2, size=(700,300))","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"In this example, we will show how the modular structure of an ecological network can be optimized. Finding the optimal modular structure can be a time-consuming process, as it relies on heuristic which are not guaranteed to converge to the global maximum. There is no elegant alternative to trying multiple approaches, repeating the process multiple times, and having some luck.","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"using EcologicalNetworks\nusing EcologicalNetworksPlots\nusing Plots\nusing Plots.PlotMeasures","category":"page"},{"location":"examples/modularity/#Generating-modular-partitions","page":"Modularity","title":"Generating modular partitions","text":"","category":"section"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"For the first approach, we will generate random partitions of the species across 3 to 12 modules, and evaluate 20 replicate attempts for each of these combinations. The output we are interested in is the number of modules, and the overall modularity.","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"N = convert(BipartiteNetwork, web_of_life(\"M_PA_003\"))\n\nn = repeat(3:12, outer=20)\nm = Array{Dict}(undef, length(n))\n\nfor i in eachindex(n)\n  # Each run returns the network and its modules\n  # We discard the network, and assign the modules to our object\n  _, m[i] = n_random_modules(n[i])(N) |> x -> brim(x...)\nend","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"q = map(x -> Q(N,x), m);\nc = (m .|> values |> collect) .|> unique .|> length;","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"p1 = scatter(c, q, c=:grey, msw=0.0, leg=false, frame=:origin, grid=false, margin = 10mm)\nxaxis!(p1, \"Number of modules\")\nyaxis!(p1, \"Modularity\", (0, 0.5))","category":"page"},{"location":"examples/modularity/#Measuring-modularity","page":"Modularity","title":"Measuring modularity","text":"","category":"section"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"Now that we have the modular partition for every attempt, we can count the modules in it, and measure its modularity. Out of all attempts, we want to get the most modular one, i.e. the one with highest modularity. In some simple problems, there may be several partitions with the highest value, so we can either take the first, or one at random:","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"optimal = rand(findall(q.== maximum(q)));\nbest_m = m[optimal];","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"This can be plotted using EcologicalNetworksPlots:","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"I = initial(RandomInitialLayout, N)\nfor step in 1:4000\n  position!(SpringElectric(1.2; gravity=0.1), I, N)\nend\np2 = plot(I, N, aspectratio=1)\nscatter!(p2, I, N, bipartite=true, nodefill=best_m, markercolor=:isolum)","category":"page"},{"location":"examples/modularity/#Species-functional-roles","page":"Modularity","title":"Species functional roles","text":"","category":"section"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"We can finally look at the functional roles of the species:","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"roles = functional_cartography(N, best_m)","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"This function returns a tuple (an unmodifiable set of values) of coordinates for every species, indicating its within-module contribution, and its participation coefficient. These results can be plotted to separate species in module hubs, network hubs, peripherals, and connectors. Note that in the context of ecological networks, this classification is commonly used. It derives from previous work on metabolic networks, which subdivides the plane in 7 (rather than 4) regions. For the sake of completeness, we have added the 7 regions to the plot as well.","category":"page"},{"location":"examples/modularity/","page":"Modularity","title":"Modularity","text":"plot(Shape([-2, 2.5, 2.5, -2], [0, 0, 0.05, 0.05]), lab=\"\", frame=:box, lc=:grey, opacity=0.3, c=:grey, lw=0.0, grid=false, margin = 10mm) #R1\nplot!(Shape([-2, 2.5, 2.5, -2], [0.05, 0.05, 0.62, 0.62]), lab=\"\", c=:transparent) #R2\nplot!(Shape([-2, 2.5, 2.5, -2], [0.62, 0.62, 0.80, 0.80]), lab=\"\", lc=:grey, opacity=0.3, c=:grey, lw=0.0) #R3\nplot!(Shape([-2, 2.5, 2.5, -2], [0.80, 0.80, 1.0, 1.0]), lab=\"\", c=:transparent) #R4\n\nplot!(Shape([2.5, 3.0, 3.0, 2.5], [0, 0, 0.3, 0.3]), lab=\"\", c=:transparent) #R5\nplot!(Shape([2.5, 3.0, 3.0, 2.5], [0.3, 0.3, 0.75, 0.75]), lab=\"\", lc=:grey, opacity=0.3, c=:grey, lw=0.0) #R6\nplot!(Shape([2.5, 3.0, 3.0, 2.5], [0.75, 0.75, 1.0, 1.0]), lab=\"\", c=:transparent) #R7\n\nvline!([2.5], c=:black, ls=:dot, lw=2.0)\nhline!([0.62], c=:black, ls=:dot, lw=2.0)\ncollect(values(roles)) |> x -> scatter!(x, leg=false, c=:white)\nyaxis!(\"Among-module connectivity\", (0,1))\nxaxis!(\"Within-module degree\", (-2, 3))","category":"page"},{"location":"interface/iterate/","page":"Iterate","title":"Iterate","text":"Ecological networks types follow the iteration interface, allowing them to be used within a loop. Iteration is done on interactions (species are already arrays), and return a named tuple with various information.","category":"page"},{"location":"interface/iterate/#Network-length","page":"Iterate","title":"Network length","text":"","category":"section"},{"location":"interface/iterate/","page":"Iterate","title":"Iterate","text":"length","category":"page"},{"location":"interface/iterate/#Base.length","page":"Iterate","title":"Base.length","text":"Base.length(N::T) where {T <: AbstractEcologicalNetwork}\n\nThe length of a network is the number of non-zero elements in it.\n\n\n\n\n\n","category":"function"},{"location":"interface/iterate/#Iteration","page":"Iterate","title":"Iteration","text":"","category":"section"},{"location":"interface/iterate/","page":"Iterate","title":"Iterate","text":"iterate","category":"page"},{"location":"interface/iterate/#Base.iterate","page":"Iterate","title":"Base.iterate","text":"Base.iterate(N::T) where {T <: AbstractEcologicalNetwork}\n\nReturns the interactions in a network (this uses less memory than interactions but is a bit slower).\n\n\n\n\n\nBase.iterate(N::T) where {T <: AbstractEcologicalNetwork}\n\nReturns the interactions in a network (this uses less memory than interactions but is a bit slower).\n\n\n\n\n\n","category":"function"},{"location":"properties/overlap/#Measures-of-overlap","page":"Overlap and similarity","title":"Measures of overlap","text":"","category":"section"},{"location":"properties/overlap/","page":"Overlap and similarity","title":"Overlap and similarity","text":"overlap\nAJS\nEAJS","category":"page"},{"location":"properties/overlap/#EcologicalNetworks.overlap","page":"Overlap and similarity","title":"EcologicalNetworks.overlap","text":"overlap(N::T; dims=dims::Union{Nothing,Integer}=nothing) where {T <: BipartiteNetwork}\n\nReturns the overlap graph for a bipartite network. The dims keyword argument can be 1 (default; overlap between top-level species) or 2 (overlap between bottom-level species). See the documentation for ?overlap for the output format.\n\n\n\n\n\noverlap(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nReturns the overlap graph for a unipartite network. The dims keyword argument can be 1 (overlap based on preys) or 2 (overlap based on predators), or nothing (default; overlap based on both predators and preys). The overlap is returned as a vector of named tuples, with elements pair (a tuple of species names), and overlap (the number of shared interactors). The ordering within the pair of species is unimportant, since overlap graphs are symetrical.\n\n\n\n\n\n","category":"function"},{"location":"properties/overlap/#EcologicalNetworks.AJS","page":"Overlap and similarity","title":"EcologicalNetworks.AJS","text":"AJS(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nAdditive Jaccard Similarity for pairs of species in the network. AJS varies between 0 (no common species) to 1 (same profiles). This function can be used to measure AJS based on only successors or predecessors, using the dims argument.\n\nNote that this function uses all direct preys and predators to measure the similarity (and so does not go beyond the immediate neighbors).\n\nReferences\n\nGao, P., Kupfer, J.A., 2015. Uncovering food web structure using a novel trophic similarity measure. Ecological Informatics 30, 110–118. https://doi.org/10.1016/j.ecoinf.2015.09.013\n\n\n\n\n\n","category":"function"},{"location":"properties/overlap/#EcologicalNetworks.EAJS","page":"Overlap and similarity","title":"EcologicalNetworks.EAJS","text":"EAJS(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nExtended Additive Jaccard Similarity for pairs of species in the network. AJS varies between 0 (no common species) to 1 (same profiles). This function can be used to measure AJS based on only successors or predecessors, using the dims argument.\n\nNote that this function counts all interactions up to a distance of 50 to define the neighbourhood of a species. This should be more than sufficient for most ecological networks.\n\nReferences\n\nGao, P., Kupfer, J.A., 2015. Uncovering food web structure using a novel trophic similarity measure. Ecological Informatics 30, 110–118. https://doi.org/10.1016/j.ecoinf.2015.09.013\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#Paths-and-centrality","page":"Centrality and paths","title":"Paths and centrality","text":"","category":"section"},{"location":"properties/paths/#Number-of-paths-and-shortest-path","page":"Centrality and paths","title":"Number of paths and shortest path","text":"","category":"section"},{"location":"properties/paths/","page":"Centrality and paths","title":"Centrality and paths","text":"number_of_paths\nshortest_path\nbellman_ford\ndijkstra","category":"page"},{"location":"properties/paths/#EcologicalNetworks.number_of_paths","page":"Centrality and paths","title":"EcologicalNetworks.number_of_paths","text":"number_of_paths(N::Unipartite; n::Int64=2)\n\nThis returns an array, not a network.\n\nn (def. 2), the path length\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.shortest_path","page":"Centrality and paths","title":"EcologicalNetworks.shortest_path","text":"shortest_path(N::UnipartiteNetwork; nmax::Int64=50)\n\nThis is not an optimal algorithm at all, but it will do given that most ecological networks are relatively small. The optional nmax argument is the longest shortest path length you will look for.\n\nIn ecological networks, the longest shortest path tends not to be very long, so any value above 10 is probably overdoing it. Note that the default value is 50, which is above 10.\n\n\n\n\n\nshortest_path(N::UnipartiteQuantiNetwork; nmax::Int64=50)\n\nThis function will remove quantitative information, then measure the shortest path length.\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.bellman_ford","page":"Centrality and paths","title":"EcologicalNetworks.bellman_ford","text":"bellman_ford(N::T, source::K) where {T <: DeterministicNetwork, K}\n\nBellman-Ford algorithm to return the shortest / easiest paths from a source species. Refer to the bellman_ford global documentation for the output format.\n\n\n\n\n\nbellman_ford(N::T) where {T <: DeterministicNetwork}\n\nBellman-ford algorithm to return the shortest / easiest paths between all pairs of species in the networks, as long as paths exists. This function will return a tuple, with fields from, to and weight. The number of elements in the tuple is the number of paths. This function works with quantitative and binary networks, and assumes that no interactions are negative.\n\nCurrently, the Bellman-Ford algorithm is slower than the shortest_path function, but the arguments are returned in a more usable way. Note that the speed penalty is only valid when measuring the shortest paths in the entire network (and will be fixed relatively soon), and does not apply as much for the shortest paths from a single source node.\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.dijkstra","page":"Centrality and paths","title":"EcologicalNetworks.dijkstra","text":"dijkstra(N::T) where {T <: DeterministicNetwork}\n\nDijkstra algorithm to return the shortest / easiest paths between all pairs of species in the networks, as long as paths exists. This function will return a tuple, with fields from, to and weight. The number of elements in the tuple is the number of paths. This function works with quantitative and binary networks, and assumes that no interactions are negative.\n\n\n\n\n\ndijkstra(N::T, source::K) where {T <: DeterministicNetwork, K}\n\nDijkstra's algorithm to return the shortest / easiest paths from a source species. Refer to the bellman_ford global documentation for the output format.\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#Centrality-measures","page":"Centrality and paths","title":"Centrality measures","text":"","category":"section"},{"location":"properties/paths/","page":"Centrality and paths","title":"Centrality and paths","text":"centrality_degree\ncentrality_closeness\ncentrality_katz\ncentrality_harmonic","category":"page"},{"location":"properties/paths/#EcologicalNetworks.centrality_degree","page":"Centrality and paths","title":"EcologicalNetworks.centrality_degree","text":"centrality_degree(N::UnipartiteNetwork)\n\nDegree centrality, corrected by the maximum degree (the most central species has a degree of 1).\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.centrality_closeness","page":"Centrality and paths","title":"EcologicalNetworks.centrality_closeness","text":"centrality_closeness(N::UnipartiteNetwork; nmax::Int64=20)\n\nThe function calls shortest_path internally – the nmax argument is the maximal path length that will be tried.\n\nReferences\n\nBavelas, A., 1950. Communication Patterns in Task‐Oriented Groups. The Journal of the Acoustical Society of America 22, 725–730. doi:10.1121/1.1906679\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.centrality_katz","page":"Centrality and paths","title":"EcologicalNetworks.centrality_katz","text":"centrality_katz(N::Unipartite; a::Float64=0.1, k::Int64=5)\n\nThis measure can work on different path length (k), and give a different weight to every subsequent connection (a). k must be at least 1 (only immediate neighbors are considered). a (being a weight), must be positive.\n\nKatz, L., 1953. A new status index derived from sociometric analysis. Psychometrika 18, 39–43. doi:10.1007/bf02289026\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.centrality_harmonic","page":"Centrality and paths","title":"EcologicalNetworks.centrality_harmonic","text":"centrality_harmonic(N::UnipartiteNetwork; nmax::Int64=20)\n\nThe function calls shortest_path internally – the nmax argument is the maximal path length that will be tried.\n\n\n\n\n\n","category":"function"},{"location":"random/otsin/#Optimal-transportation-for-species-interaction-networks","page":"Optimal transportation","title":"Optimal transportation for species interaction networks","text":"","category":"section"},{"location":"random/otsin/","page":"Optimal transportation","title":"Optimal transportation","text":"By solving an optimal transportation problem, one can estimate the interaction intensities given (1) a matrix of interaction utility values (i.e., the preferences for certain interactions between the species) and (2) the abundances of the top and bottom species. It hence allows predicting how species will interact. The interactions estimated intensities are given by the ecological coupling matrix Q, which has the optimal trade-off between utility (enriching for prefered interactions) and entropy (interactions are distributed as randomly as possible). The function optimaltransportation has the following inputs:","category":"page"},{"location":"random/otsin/","page":"Optimal transportation","title":"Optimal transportation","text":"a utility matrix M;\nthe (relative) abundances of the top and bottom species a and b;\nthe entropic regularization parameter λ (set default to 1).","category":"page"},{"location":"random/otsin/","page":"Optimal transportation","title":"Optimal transportation","text":"For details, we refer to the paper presenting this framework.","category":"page"},{"location":"random/otsin/","page":"Optimal transportation","title":"Optimal transportation","text":"optimaltransportation","category":"page"},{"location":"random/otsin/#EcologicalNetworks.optimaltransportation","page":"Optimal transportation","title":"EcologicalNetworks.optimaltransportation","text":"optimaltransportation(M::AbstractArray;\n        [a, b, λ=1, ϵ=1e-10, maxiter=100])\n\nPerforms optimal transportation on an ecological network. Here, M is treated as an utility matrix, quantifying the preference the species of the two throphic levels have for interacting with another. One can fix both, one or none of the species abundances by given a (row sums, corresponding to top species) and/or b (column sums, corresponding to bottom species). The strengh of entropic  regularisation is set by λ, where higher values indicate more utitlity and lower values more entropy. \n\nϵ and maxiter control the number of Sinkhorn iterations. You likely won't need to change these.\n\nThis version works on arrays.\n\nStock, M., Poisot, T., & De Baets, B. (2021). « Optimal transportation theory for species interaction networks. » Ecology and Evolution, 00(1), ece3.7254. https://doi.org/10.1002/ece3.7254\n\n\n\n\n\noptimaltransportation(M::AbstractBipartiteNetwork;\n        [a, b, λ=1, ϵ=1e-10, maxiter=100])\n\nPerforms optimal transportation on an ecological network. Here, M is treated as an utility matrix, quantifying the preference the species of the two throphic levels have for interacting with another. One can fix both, one or none of the species abundances by given a (row sums, corresponding to top species) and/or b (column sums, corresponding to bottom species). The strengh of entropic  regularisation is set by λ, where higher values indicate more utitlity and lower values more entropy. \n\nϵ and maxiter control the number of Sinkhorn iterations. You likely won't need to change these.\n\nStock, M., Poisot, T., & De Baets, B. (2021). « Optimal transportation theory for species interaction networks. » Ecology and Evolution, 00(1), ece3.7254. https://doi.org/10.1002/ece3.7254\n\n\n\n\n\n","category":"function"},{"location":"random/otsin/#References","page":"Optimal transportation","title":"References","text":"","category":"section"},{"location":"random/otsin/","page":"Optimal transportation","title":"Optimal transportation","text":"Stock, M., Poisot, T., & De Baets, B. (2021). « Optimal transportation theory for species interaction networks. » Ecology and Evolution, 00(1), ece3.7254. https://doi.org/10.1002/ece3.7254","category":"page"},{"location":"properties/resilience/#Resilience","page":"Resilience","title":"Resilience","text":"","category":"section"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"We provide the metrics proposed by Gao et al (2016) which summarize the global behaviour of complex unipartite networks. The dynamics of a system of N components (nodes/species) can follow the coupled nonlinear differential equation","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"fractextdx_itextdt = F(x_i) + sum_j=1^N A_ijG(x_i x_j)","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"where the adjacency matrix A captures the interaction between the components. This system can be described in 1-D using an effective term","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"fractextdx_textefftextdt = F(x_texteff) + beta_texteffG(x_texteff x_texteff)","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"with beta_texteff a single resilience parameter which can capture the effect of perturbing the system (node/link removal, weight change...). This resilience parameter can be computed from an AbstractUnipartiteNetwork using the functions βeff or resilience.","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"It can be shown that","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"beta_texteff = langle s rangle + mathcalS  mathcalH","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"with","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"langle s rangle\nthe average weighted degree (computed using s_mean),\nmathcalS\nthe symmetry(computed using symmetry),\nmathcalH\nthe heterogeneity (computed using heterogeneity).","category":"page"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"Goa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948","category":"page"},{"location":"properties/resilience/#Available-functions","page":"Resilience","title":"Available functions","text":"","category":"section"},{"location":"properties/resilience/","page":"Resilience","title":"Resilience","text":"s\nσ_in\nσ_out\nsymmetry\nheterogeneity\nresilience","category":"page"},{"location":"properties/resilience/#EcologicalNetworks.s","page":"Resilience","title":"EcologicalNetworks.s","text":"s(N::AbstractUnipartiteNetwork; dims::Union{Nothing,Integer}=nothing)\n\nComputes the average weighted degree. This is proportional to the (weighted) density of interactions.\n\nIf dims is provided, the incoming (dims=1) or outgoing (dims=2) is computed.\n\n\n\n\n\n","category":"function"},{"location":"properties/resilience/#EcologicalNetworks.σ_in","page":"Resilience","title":"EcologicalNetworks.σ_in","text":"σ_in(N::AbstractUnipartiteNetwork)\n\nComputes the standard deviation of the ingoing weighted degree of an unipartite network.\n\n\n\n\n\n","category":"function"},{"location":"properties/resilience/#EcologicalNetworks.σ_out","page":"Resilience","title":"EcologicalNetworks.σ_out","text":"σ_out(N::AbstractUnipartiteNetwork)\n\nComputes the standard deviation of the outgoing weighted degree of an unipartite network.\n\n\n\n\n\n","category":"function"},{"location":"properties/resilience/#EcologicalNetworks.symmetry","page":"Resilience","title":"EcologicalNetworks.symmetry","text":"symmetry(N::AbstractUnipartiteNetwork)\n\nComputes the symmetry between s^in and s^out (the in- and outgoing weighted degree of an unipartite network). This is computed as the Pearson correlation between the s^in and s^out. It is hence a value between -1 and 1, where high positive values indicate that species with many outgoing degrees tend to have many ingoing degrees and negative values mean the opposite. An undirected network is perfectly symmetric but, for example, a food web where predators are less likely to be prey would have a negative symmetry.\n\nGoa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948\n\n\n\n\n\n","category":"function"},{"location":"properties/resilience/#EcologicalNetworks.heterogeneity","page":"Resilience","title":"EcologicalNetworks.heterogeneity","text":"heterogeneity(N::AbstractUnipartiteNetwork)\n\nComputes the heterogeneity for an unipartite network, a topological characteristic which quantifies the difference in in- and outgoing degrees between species. It is computed as σin * σout / s_mean. A value of 0 indicates that all species have the same (weighted) in- and outdegrees.\n\nGoa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948\n\n\n\n\n\n","category":"function"},{"location":"properties/resilience/#EcologicalNetworks.resilience","page":"Resilience","title":"EcologicalNetworks.resilience","text":"resilience(N::AbstractUnipartiteNetwork)\n\nA resilience parameters described by Gao et al. (2016). It is a global parameters describing the dynamics of an unipartite network as an effective 1D equation of the form\n\nf(xeff) = F(xeff) + βeff G(xeff, xeff)\n\ni.e. describing a second-order term representing the effect of the network on the dynamics of the 'effective state' xeff of the system.\n\nGoa, J., Barzael, B. and Barabási 2016. Universal resilience patterns in complex networks. Nature 530(7590), 307-312. doi:10.1038/nature16948\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Indices-based-on-information-theory","page":"Information theory","title":"Indices based on information theory","text":"","category":"section"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"Indices based on information theory, such as entropy, mutual information etc, can easily be computed. To this end, the ecological network is transformed in a bivariate distribution. This is done by normalizing the adjacency or incidence matrix to obtain a doubly stochastic matrix. The information theoretic indices are computed either from this matrix or directly from the ecological network. Note that when using an array is input, the functions do not perform any checks whether the matrix is normalized and nonnegative. When the input is an ecological network, the functions automatically convert the network to a normalized probability matrix.","category":"page"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"One can compute individual indices or use the function information_decomposition which performs the entire decomposition at once. This decomposition yields for a given network the deviation of the marginal distributions of the species with the uniform distribution (quantifying the evenness), the mutual information (quantifying the specialisation) and the variance of information (quantifying the freedom and stability of the interactions). These indices satisfy the following balance equation for the top (T) and bottom (B) throphic level:","category":"page"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"log(nm) = D(BT) + 2 I(BT) + V(BT)","category":"page"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"log(n) = D(B) + I(BT) + H(BT)","category":"page"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"log(m) = D(T) + I(BT) + H(TB)","category":"page"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"Here, n and m are number of bottom and top species, respectively.","category":"page"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"Indices can be calculated for the joint distribution, as well as for the marginal distributions of the two trophic levels (if applicable), by changing an optional argument dim=1 of the function.","category":"page"},{"location":"properties/information/#Network-conversion","page":"Information theory","title":"Network conversion","text":"","category":"section"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"make_joint_distribution","category":"page"},{"location":"properties/information/#EcologicalNetworks.make_joint_distribution","page":"Information theory","title":"EcologicalNetworks.make_joint_distribution","text":"make_joint_distribution(N::NT) where {NT<:AbstractEcologicalNetwork}\n\nReturns a probability matrix computed from the adjacency or incidence matrix. Raises an error if the matrix contains negative values. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Indices","page":"Information theory","title":"Indices","text":"","category":"section"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"entropy\nconditional_entropy\nmutual_information\nvariation_information\npotential_information\ndiff_entropy_uniform","category":"page"},{"location":"properties/information/#EcologicalNetworks.entropy","page":"Information theory","title":"EcologicalNetworks.entropy","text":"entropy(P::AbstractArray; [dims])\n\nComputes the joint entropy of a probability matrix. Does not perform any checks whether the matrix is normalized. Output in bits.\n\nIf the dims keyword argument is provided, the marginal entropy of the matrix is computed. dims indicates whether to compute the entropy for the rows  (dims=1) or columns (dims=2).\n\n\n\n\n\nentropy(N::AbstractEcologicalNetwork; [dims])\n\nComputes the joint entropy of an ecological network. If dims is specified, The marginal entropy of the ecological network is computed. dims indicates whether to compute the entropy for the rows (dims=1) or columns (dims=2). Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.conditional_entropy","page":"Information theory","title":"EcologicalNetworks.conditional_entropy","text":"conditional_entropy(P::AbstractArray, given::I)\n\nComputes the conditional entropy of probability matrix. If given = 1, it is the entropy of the columns, and vise versa when given = 2. Output in bits.\n\nDoes not check whether P is a valid probability matrix.\n\n\n\n\n\nconditional_entropy(N::AbstractEcologicalNetwork, given::I)\n\nComputes the conditional entropy of an ecological network. If given = 1, it is the entropy of the columns, and vise versa when given = 2.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.mutual_information","page":"Information theory","title":"EcologicalNetworks.mutual_information","text":"mutual_information(P::AbstractArray)\n\nComputes the mutual information of a probability matrix. Output in bits.\n\n\n\n\n\nmutual_information(N::NT) where {NT<:AbstractEcologicalNetwork}\n\nComputes the mutual information of an ecological network. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.variation_information","page":"Information theory","title":"EcologicalNetworks.variation_information","text":"variation_information(P::AbstractArray)\n\nComputes the variation of information of a double stochastic matrix. Output in bits.\n\n\n\n\n\nvariation_information(N::AbstractEcologicalNetwork)\n\nComputes the variation of information of an ecological network. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.potential_information","page":"Information theory","title":"EcologicalNetworks.potential_information","text":"potential_information(N::NT; [dims])\n\nComputes the maximal potential information in a network, corresponding to every species interacting with every other species. Compute result for the marginals using the optional parameter dims. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.diff_entropy_uniform","page":"Information theory","title":"EcologicalNetworks.diff_entropy_uniform","text":"diff_entropy_uniform(P::AbstractArray; [dims])\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\ndiff_entropy_uniform(N::AbstractEcologicalNetwork, dims::I=nothing)\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Decomposition","page":"Information theory","title":"Decomposition","text":"","category":"section"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"information_decomposition","category":"page"},{"location":"properties/information/#EcologicalNetworks.information_decomposition","page":"Information theory","title":"EcologicalNetworks.information_decomposition","text":"information_decomposition(N::AbstractEcologicalNetwork; norm::Bool=false, dims=nothing)\n\nPerforms an information theory decomposition of a given ecological network, i.e. the information content in the normalized adjacency matrix is split in:\n\n:D : difference in entropy of marginals compared to an uniform distribition\n:I : mutual information\n:V : variation of information / conditional entropy\n\nIf norm=true, the components are normalized such that their sum is equal to 1. One can optinally give the dimision, indicating whether to compute the indices for the rows (dims=1), columns (dims=2) or the whole matrix (default).\n\nResult is returned in a Dict. Outputs in bits.\n\nStock, M.; Hoebeke, L.; De Baets, B. « Disentangling the Information in Species Interaction Networks ». Entropy 2021, 23, 703. https://doi.org/10.3390/e23060703\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Effective-interactions","page":"Information theory","title":"Effective interactions","text":"","category":"section"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"convert2effective","category":"page"},{"location":"properties/information/#EcologicalNetworks.convert2effective","page":"Information theory","title":"EcologicalNetworks.convert2effective","text":"convert2effective(indice::Real)\n\nConvert an information theory indices in an effective number (i.e. number of corresponding interactions). Assumes an input in bits (i.e. log with base 2 is used).\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#References","page":"Information theory","title":"References","text":"","category":"section"},{"location":"properties/information/","page":"Information theory","title":"Information theory","text":"Stock, M.; Hoebeke, L.; De Baets, B. « Disentangling the Information in Species Interaction Networks ». Entropy 2021, 23, 703. https://doi.org/10.3390/e23060703","category":"page"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"This page presents the core functions to manipulate networks. Whenever possible, the approach of EcologicalNetworks is to overload functions from Base.","category":"page"},{"location":"interface/highlevel/#Accessing-species","page":"Core functions","title":"Accessing species","text":"","category":"section"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"species","category":"page"},{"location":"interface/highlevel/#EcologicalNetworks.species","page":"Core functions","title":"EcologicalNetworks.species","text":"species(N::AbstractBipartiteNetwork)\n\nReturns an array of all species in a bipartite network. The order of the species corresponds to the order of rows (top level) and columns (bottom level) of the adjacency matrix, in this order.\n\n\n\n\n\nspecies(N::AbstractUnipartiteNetwork; dims::Int64=1)\n\nReturns an array of species on either side of a unipartite network. In a unipartite network, species are the same on either size. This function is nevertheless useful when you want to write code that takes either side of the network in a general way.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Accessing-interactions","page":"Core functions","title":"Accessing interactions","text":"","category":"section"},{"location":"interface/highlevel/#Presence-of-an-interaction","page":"Core functions","title":"Presence of an interaction","text":"","category":"section"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"has_interaction\ninteractions","category":"page"},{"location":"interface/highlevel/#EcologicalNetworks.has_interaction","page":"Core functions","title":"EcologicalNetworks.has_interaction","text":"has_interaction{(N::AbstractEcologicalNetwork, i::NT, j::NT)\n\nThis function returns true if the interaction between i and j is not 0. This refers to species by their names/values, and is the recommended way to test for the presence of an interaction.\n\nUse N[i,j] if you need to get the value of the interaction.\n\n\n\n\n\nhas_interaction(N::AbstractEcologicalNetwork, i::Int64, j::Int64)\n\nThis function returns true if the interaction between i and j is not 0. This refers to species by their position instead of their name, and is not recommended as the main solution. This is used internally by a few functions, but is exported because it may be of general use.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#EcologicalNetworks.interactions","page":"Core functions","title":"EcologicalNetworks.interactions","text":"interactions(N::AbstractEcologicalNetwork)\n\nReturns the interactions in the ecological network. Interactions are returned as an array of named tuples. A minima, these have fields from and to. For networks that are probabilistic, there is a probability field. For networks that are quantitative, there is a strength field. This functions allows to iterate over interactions in a network in a convenient way.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Random-network-samples","page":"Core functions","title":"Random network samples","text":"","category":"section"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"sample","category":"page"},{"location":"interface/highlevel/#StatsBase.sample","page":"Core functions","title":"StatsBase.sample","text":"sample(N::T, n::Int64) where {T<:AbstractUnipartiteNetwork}\n\nSamples a sub-network from a unipartite network. n is the number of species to have in the sampled network. This functions makes no attempt to ensure that the network is not degenerate, or even has a single interaction. This is the recommended way to sample a unipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64}) where {T<:AbstractUnipartiteNetwork}\n\nSame as sample, but work when called with (n,) instead of a species number. This is an accepted way to sample a unipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64,Int64}) where {T<:AbstractUnipartiteNetwork}\n\nSame as sample but called with (n,n) instead of a species number. Note that this will fail if the size requested is not square. This is not a really good way to sample a unipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64}) where {T<:AbstractBipartiteNetwork}\n\nSame as sample but with a single species number given as (n,), to return a bipartite network of equal richness on both sides. This is not a very good way to sample a bipartite network.\n\n\n\n\n\nsample(N::T, n::Int64) where {T<:AbstractBipartiteNetwork}\n\nSame thing as sample but with a single species number, to return a bipartite network of equal richness on both sides. This is not a very good way to sample a bipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64,Int64}) where {T<:AbstractBipartiteNetwork}\n\nSamples a sub-network from a bipartite network. n is the size of the network to return, i.e. number of top and bottom species. This functions makes no attempt to ensure that the network is not degenerate, or even has a single interaction.\n\nThis is the recommended way to sample a bipartite network.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Network-utilities","page":"Core functions","title":"Network utilities","text":"","category":"section"},{"location":"interface/highlevel/#Species-richness","page":"Core functions","title":"Species richness","text":"","category":"section"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"richness","category":"page"},{"location":"interface/highlevel/#EcologicalNetworks.richness","page":"Core functions","title":"EcologicalNetworks.richness","text":"richness(N::AbstractEcologicalNetwork, i::Int64)\n\nReturns the number of species on either side of the network. The value of i can be 1 (top-level species) or 2 (bottom-level species), as in the species function.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Changing-network-shape","page":"Core functions","title":"Changing network shape","text":"","category":"section"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"permutedims\nnodiagonal\nnodiagonal!","category":"page"},{"location":"interface/highlevel/#Base.permutedims","page":"Core functions","title":"Base.permutedims","text":"permutedims(N::AbstractBipartiteNetwork)\n\nTranposes the network and returns a copy\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#EcologicalNetworks.nodiagonal","page":"Core functions","title":"EcologicalNetworks.nodiagonal","text":"nodiagonal(N::AbstractUnipartiteNetwork)\n\nReturns a copy of the network with its diagonal set to zero.\n\n\n\n\n\nnodiagonal(N::AbstractBipartiteNetwork)\n\nReturns a copy of the network (because the diagonal of a bipartite network is never a meaningful notion). This function is clearly useless, but allows to write general code for all networks types when a step requires removing the diagonal.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#EcologicalNetworks.nodiagonal!","page":"Core functions","title":"EcologicalNetworks.nodiagonal!","text":"nodiagonal!(N::AbstractUnipartiteNetwork)\n\nModifies the network so that its diagonal is set to the appropriate zero.\n\n\n\n\n\nnodiagonal!(N::AbstractBipartiteNetwork)\n\nDoes nothing.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Invert-interactions","page":"Core functions","title":"Invert interactions","text":"","category":"section"},{"location":"interface/highlevel/","page":"Core functions","title":"Core functions","text":"Base.:!","category":"page"},{"location":"interface/highlevel/#Base.:!","page":"Core functions","title":"Base.:!","text":"Base.:!{T<:DeterministicNetwork}(N::T)\n\nReturns the inverse of a binary network – interactions that were false become true, and conversely.\n\n\n\n\n\n","category":"function"},{"location":"properties/motifs/#Motif-enumeration","page":"Motifs","title":"Motif enumeration","text":"","category":"section"},{"location":"properties/motifs/#List-of-canonical-motifs","page":"Motifs","title":"List of canonical motifs","text":"","category":"section"},{"location":"properties/motifs/","page":"Motifs","title":"Motifs","text":"unipartitemotifs","category":"page"},{"location":"properties/motifs/#EcologicalNetworks.unipartitemotifs","page":"Motifs","title":"EcologicalNetworks.unipartitemotifs","text":"unipartitemotifs()\n\nThe names of the motifs come from Stouffer et al. (2007) – especially Fig. 1, available online at http://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only\n\nThe motifs are returned as a named tuple, with every motif identified by its name in the original publication. The species are named :a. :b, and :c.\n\n\n\n\n\n","category":"function"},{"location":"properties/motifs/#Motif-counting","page":"Motifs","title":"Motif counting","text":"","category":"section"},{"location":"properties/motifs/","page":"Motifs","title":"Motifs","text":"find_motif","category":"page"},{"location":"properties/motifs/#EcologicalNetworks.find_motif","page":"Motifs","title":"EcologicalNetworks.find_motif","text":"find_motif(N::T1, m::T2) where {T1<:AbstractEcologicalNetwork, T2<:BinaryNetwork}\n\nReturns an array of tuples, in which each tuple contains the species that are part of the motif. The length of the array gives the number of times the motif was found. For probabilistic networks, the tuple also contains the probability of observing the species in the correct conformation for the motif, as well as the variance.\n\nReferences\n\nMilo, R., Shen-Orr, S., Itzkovitz, S., Kashtan, N., Chklovskii, D., Alon, U.,\nNetwork motifs: simple building blocks of complex networks. Science 298,\n824–7. https://doi.org/10.1126/science.298.5594.824\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/motifs/#Probabilistic-case","page":"Motifs","title":"Probabilistic case","text":"","category":"section"},{"location":"properties/motifs/","page":"Motifs","title":"Motifs","text":"expected_motif_count","category":"page"},{"location":"properties/motifs/#EcologicalNetworks.expected_motif_count","page":"Motifs","title":"EcologicalNetworks.expected_motif_count","text":"expected_motif_count(s)\n\nGet the expected number of motifs (and variance) from the output of find_motif on a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Network-β-diversity","page":"Beta-diversity","title":"Network β-diversity","text":"","category":"section"},{"location":"properties/betadiversity/","page":"Beta-diversity","title":"Beta-diversity","text":"Measures of β-diversity work by first calculating the unique/shared items (using the βs, βos, and βwn functions), then passing on these arguments to one of the KGLXX functions to return a (dis)similarity score. The KGL functions are named for Koleff, Gaston, and Lennon – the number of each function matches the number in Table 1.","category":"page"},{"location":"properties/betadiversity/#β-diversity-components","page":"Beta-diversity","title":"β-diversity components","text":"","category":"section"},{"location":"properties/betadiversity/","page":"Beta-diversity","title":"Beta-diversity","text":"The package implements functions for the βs, βos, and βwn components of network dissimilarity. In the original publication, we also described βst, which was the proprotion of dissimilarity due to species turnover, and defined as βst = βwn - βos for measures of dissimilarity bounded between 0 and 1. After discussing with colleagues and considering our own use-cases, it appears that the interpretation of βst is not always straightforward, and so we have decided to exclude it form the available functions.","category":"page"},{"location":"properties/betadiversity/","page":"Beta-diversity","title":"Beta-diversity","text":"βs\nβos\nβwn","category":"page"},{"location":"properties/betadiversity/#EcologicalNetworks.βs","page":"Beta-diversity","title":"EcologicalNetworks.βs","text":"βs(X::T, Y::T; dims::Union{Nothing,Integer}=nothing) where {T<:BinaryNetwork}\n\nComponents of β-diversity as measured on species.\n\nReferences\n\nKoleff, P., Gaston, K.J., Lennon, J.J., 2003. Measuring beta diversity for presence–absence data. Journal of Animal Ecology 72, 367–382. https://doi.org/10.1046/j.1365-2656.2003.00710.x\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#EcologicalNetworks.βos","page":"Beta-diversity","title":"EcologicalNetworks.βos","text":"βos(X::T, Y::T) where {T<:BipartiteNetwork}\n\nOverlapping species (bipartite)\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\nβos(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nOverlapping species (unipartite)\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#EcologicalNetworks.βwn","page":"Beta-diversity","title":"EcologicalNetworks.βwn","text":"βwn(X::T, Y::T) where {T<:BinaryNetwork}\n\nWhole network\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#β-diversity-measures","page":"Beta-diversity","title":"β-diversity measures","text":"","category":"section"},{"location":"properties/betadiversity/","page":"Beta-diversity","title":"Beta-diversity","text":"KGL01","category":"page"},{"location":"properties/betadiversity/#EcologicalNetworks.KGL01","page":"Beta-diversity","title":"EcologicalNetworks.KGL01","text":"KGL01(S::T)\n\nWhittaker\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Basic-operations-on-networks","page":"Beta-diversity","title":"Basic operations on networks","text":"","category":"section"},{"location":"properties/betadiversity/","page":"Beta-diversity","title":"Beta-diversity","text":"Internally, the functions for β-diversity rely on the usual operations on sets. The act of combining two networks, for example, is a union operation.","category":"page"},{"location":"properties/betadiversity/","page":"Beta-diversity","title":"Beta-diversity","text":"setdiff\nunion\nintersect","category":"page"},{"location":"properties/betadiversity/#Base.setdiff","page":"Beta-diversity","title":"Base.setdiff","text":"setdiff(X::T, Y::T) where {T<:BipartiteNetwork}\n\nDifference between two bipartite networks. This operation is sensitive to the order of arguments, as the resulting network will have the species present in the first network (and their interactions) only.\n\n\n\n\n\nsetdiff(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nDifference between two unipartite networks. This operation is sensitive to the order of arguments, as the resulting network will have the species present in the first network (and their interactions) only.\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Base.union","page":"Beta-diversity","title":"Base.union","text":"union(X::T, Y::T) where {T<:BipartiteNetwork}\n\nUnion of two bipartite networks – interactions and species which are present in either networks are also present in the final network.\n\n\n\n\n\nunion(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nUnion of two unipartite networks – interactions and species which are present in either networks are also present in the final network.\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Base.intersect","page":"Beta-diversity","title":"Base.intersect","text":"intersect(X::T, Y::T) where {T<:BipartiteNetwork}\n\nIntersect between two bipartite networks. The resulting network has the species and interactions common to both networks. This can result in species being disconnected, if they are found in both networks but with no operations in common.\n\n\n\n\n\nintersect(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nIntersect between two unipartite networks. The resulting network has the species and interactions common to both networks. This can result in species being disconnected, if they are found in both networks but with no operations in common.\n\n\n\n\n\n","category":"function"},{"location":"interface/conversions/","page":"Conversions","title":"Conversions","text":"Conversions between types are used to perform two usual operations: make a bipartite network unipartite, and remove quantitative information. There are two high-level functions which work by using the union types, and a series of type-to-type functions (the later should be avoided, and exists only to make the high-level functions work).","category":"page"},{"location":"interface/conversions/","page":"Conversions","title":"Conversions","text":"convert","category":"page"},{"location":"interface/conversions/#Base.convert","page":"Conversions","title":"Base.convert","text":"convert(::Type{UnipartiteNetwork}, N::T) where {T <: BipartiteNetwork}\n\nProjects a deterministic bipartite network in its unipartite representation.\n\n\n\n\n\nconvert(::Type{UnipartiteProbabilisticNetwork}, N::T) where {T <: BipartiteProbabilisticNetwork}\n\nProjects a probabilistic bipartite network in its unipartite representation.\n\n\n\n\n\nconvert(::Type{UnipartiteQuantitativeNetwork}, N::T) where {T <: BipartiteQuantitativeNetwork}\n\nProjects a quantitative bipartite network in its unipartite representation.\n\n\n\n\n\nconvert(::Type{UnipartiteNetwork}, N::T) where {T <: UnipartiteQuantitativeNetwork}\n\nConvert a unipartite quantitative network to a unipartite binary network. This amounts to removing the quantitative information.\n\n\n\n\n\nconvert(::Type{BipartiteNetwork}, N::T) where {T <: BipartiteQuantitativeNetwork}\n\nConvert a bipartite quantitative network to a bipartite binary network. This amounts to removing the quantitative information.\n\n\n\n\n\nconvert(::Type{AbstractUnipartiteNetwork}, N::AbstractBipartiteNetwork)\n\nProjects any bipartite network in its unipartite representation. This function will call the correct type-to-type convert function depending on the type of the input network.\n\nThe type to be converted to must be AbstractUnipartiteNetwork – for example, converting a bipartite probabilistic network to a probabilistic unipartite network is not a meaningful operation.\n\n\n\n\n\nconvert(::Type{BinaryNetwork}, N::QuantitativeNetwork)\n\nProjects any bipartite network in its unipartite representation. This function will call the correct type-to-type convert function depending on the type of the input network.\n\nThis function does not work for probabilistic networks. The operation of generating a deterministic network from a probabilistic one is different from a simple conversion: it can be done either through random draws, or by selecting only interactions with a probability greater than 0 (N>0.0 will do this).\n\n\n\n\n\nconvert(::Type{BipartiteNetwork}, N::T) where {T <: UnipartiteNetwork}\n\nProjects a unipartite network (specifically, a BipartiteNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\nconvert(::Type{BipartiteProbabilisticNetwork}, N::T) where {T <: UnipartiteProbabilisticNetwork}\n\nProjects a unipartite network (specifically, a BipartiteProbabilisticNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\nconvert(::Type{BipartiteQuantitativeNetwork}, N::T) where {T <: UnipartiteQuantitativeNetwork}\n\nProjects a unipartite network (specifically, a BipartiteQuantitativeNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\n","category":"function"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"In this example, we will visualize different measures of centrality, using a large food web.","category":"page"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"using EcologicalNetworks\nusing EcologicalNetworksPlots\nusing Plots\nusing Plots.PlotMeasures","category":"page"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"We will work on a quantitative intertidal food web:","category":"page"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"N = convert(BinaryNetwork, pajek()[:ChesUpper])","category":"page"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"We will then find a force-directed layout to visualize it:","category":"page"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"I = initial(RandomInitialLayout, N)\nfor step in 1:200richness(N)\n    position!(ForceAtlas2(1.2), I, N)\nend","category":"page"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"We can now show the different values of centrality on this plot:","category":"page"},{"location":"examples/centrality/#Degree-centrality","page":"Centrality","title":"Degree centrality","text":"","category":"section"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"plot(I, N)\nscatter!(I, N, nodefill=centrality_degree(N), c=:YlGnBu, aspectratio=1)","category":"page"},{"location":"examples/centrality/#Katz-centrality","page":"Centrality","title":"Katz centrality","text":"","category":"section"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"plot(I, N)\nscatter!(I, N, nodefill=centrality_katz(N), c=:YlGnBu, aspectratio=1)","category":"page"},{"location":"examples/centrality/#Closeness-centrality","page":"Centrality","title":"Closeness centrality","text":"","category":"section"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"plot(I, N)\nscatter!(I, N, nodefill=centrality_closeness(N), c=:YlGnBu, aspectratio=1)","category":"page"},{"location":"examples/centrality/#Harmonic-centrality","page":"Centrality","title":"Harmonic centrality","text":"","category":"section"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"plot(I, N)\nscatter!(I, N, nodefill=centrality_harmonic(N), c=:YlGnBu, aspectratio=1)","category":"page"},{"location":"examples/centrality/#Eigenvector-centrality","page":"Centrality","title":"Eigenvector centrality","text":"","category":"section"},{"location":"examples/centrality/","page":"Centrality","title":"Centrality","text":"plot(I, N)\nscatter!(I, N, nodefill=centrality_eigenvector(N), c=:YlGnBu, aspectratio=1)","category":"page"},{"location":"#EcologicalNetworks","page":"Index","title":"EcologicalNetworks","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"This package provides a common interface for the analysis of ecological networks, using julia. It is very opinionated about the \"right\" way to do things, but we have documented our opinions in several publications (see the references at the bottom of this page, and in the documentation of all functions).","category":"page"},{"location":"","page":"Index","title":"Index","text":"The package is built around a type system for networks, which is intended to capture the different types of data and communities ecologists need to handle. This makes the package extensible, both by writing additional methods with a very fine-tuned dispatch, or by adding additional types that should work out of the box (or be very close to).","category":"page"},{"location":"","page":"Index","title":"Index","text":"This package is a library for the analysis of ecological networks. On purpose, we do not provide \"wrapper\"-type functions that would perform an entire analysis. We experimented with this idea during development, and rapidly realized that even for the most simple research project, we needed to make small tweaks that made the wrappers a nuisance. We decided to give you lego blocks, and it's your job to build the kick-ass spaceship.","category":"page"},{"location":"","page":"Index","title":"Index","text":"We tried to avoid making the package into yet another Domain Specific Language. This means that when an operation should be expressed using the julian syntax, we made it this way. Transforming networks from a type to another is done with convert. Random networks are drawn with rand. Swapping of interactions is done with shuffle. There is support for slicing of networks, as well as the entire operations on sets. A lot of methods from Base have been overloaded, and this should make the code easy to write and read, since it looks almost exactly like any other Julia code on arrays.","category":"page"},{"location":"#Why-should-I-use-this-package?","page":"Index","title":"Why should I use this package?","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"It offers a single interface to analyse almost all type of networks for ecology. It's somewhat fast (very specialized packages are likely to be faster). It's built around the very best practices in network analysis. We think the type system is very cool. It's very well tested and adequately documented. We used it for research and teaching for months before releasing it. It's actively maintained and we will keep adding functionalities.","category":"page"},{"location":"","page":"Index","title":"Index","text":"You don't have to use it if you don't want to.","category":"page"},{"location":"#But-it-doesn't-even-make-figures!","page":"Index","title":"But it doesn't even make figures!","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"The code for network visualization is in a companion package named EcologicalNetworksPlots. There are two reasons for this decision.","category":"page"},{"location":"","page":"Index","title":"Index","text":"First, network visualization, although attractive, is not necessary for network analysis. It can help, but given the wrong network layout technique, it can also introduce biases. When the volume of networks increased, we found that visualization became less and less informative. Because it is not strictly speaking a tool for analysis, it is not part of this package.","category":"page"},{"location":"","page":"Index","title":"Index","text":"Second, it helps to keep software dependency small. Most of our work using this package is done on clusters of one sort of the other, and having fewer dependencies means that installation is easier. EcologicalNetworksPlots can be installed like any other Julia package. It is also documented on [its own website][ENP].","category":"page"},{"location":"","page":"Index","title":"Index","text":"[ENP]: https://poisotlab.github.io/EcologicalNetworksPlots.jl/stable/","category":"page"},{"location":"#And-worse,-you-forgot-my-favorite-method!","page":"Index","title":"And worse, you forgot my favorite method!","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Yeah, about that. We probably didn't.","category":"page"},{"location":"","page":"Index","title":"Index","text":"A lot of methods were considered for inclusion in the package, but ultimately discarded because we were not 100% confident in their robustness, reliability, validity, or interpretation. As we said, the package is very opinionated about the right way to do things, and new functions require more time for maintenance and testing; it makes sense for us to focus on things we trust.","category":"page"},{"location":"","page":"Index","title":"Index","text":"If your favorite measure or method is missing, there are two solutions. First, this package is essentially a library of functions to build network analyses, so you can use this to create a function that does what you want. For example, if you want to take the square root of a quantitative network, you can overload the √ method from base this way:","category":"page"},{"location":"","page":"Index","title":"Index","text":"import Base: √\n\nfunction √(N::T) where {T <: QuantitativeNetwork}\n   @assert all(N.edges .> zero(eltype(N.edges)))\n   # Take the square root of the interaction strength\n   sqrt_matrix = sqrt.(N.edges)\n   # Return a new network with the correct types\n   return T(sqrt_matrix, EcologicalNetworks._species_objects(N)...)\nend","category":"page"},{"location":"","page":"Index","title":"Index","text":"The second solution (which is actually a second step after you have been writing your own method), is to submit a pull request to the package, to have your new methods available in the next release. Currently, we will be very selective about which methods are added (because every line of code needs to be maintained).","category":"page"},{"location":"#References","page":"Index","title":"References","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"About the analysis of ecological networks in general, the package covers (or will cover over time) most of the measures we identified as robust in the following publication:","category":"page"},{"location":"","page":"Index","title":"Index","text":"Delmas, Eva, Mathilde Besson, Marie-Hélène Brice, Laura A. Burkle, Giulio V. Dalla Riva, Marie-Josée Fortin, Dominique Gravel, et al. « Analysing Ecological Networks of Species Interactions ». Biological Reviews (2018), 112540. https://doi.org/10.1111/brv.12433.","category":"page"},{"location":"","page":"Index","title":"Index","text":"We highly recommend we keep it nearby when using the package. A lot of decisions taken during development are grounded in the analysis of the literature we conducted over a few years. Anything else is now documented in the functions themselves.","category":"page"},{"location":"#How-can-I-contribute?","page":"Index","title":"How can I contribute?","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Good question!","category":"page"},{"location":"","page":"Index","title":"Index","text":"The easiest way to contribute is to use the package, and [open an issue][issue] whenever you can't manage to do something, think the syntax is not clear, or the documentation is confusing. This is in fact one of the best ways to help.","category":"page"},{"location":"","page":"Index","title":"Index","text":"[issue]: https://github.com/PoisotLab/EcologicalNetworks.jl/issues","category":"page"},{"location":"","page":"Index","title":"Index","text":"If you want to contribute code, you can fork this repository, and start adding the functions you want, or changing the code. Please work from the develop branch (master does not accept pull requests except from maintainers, and cannot be pushed to unless a series of conditions are met). It's better if all of your code is tested and documented, but we will work with you when receiving the pull request anyways.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"One feature of EcologicalNetwork which makes the rest of the package works is the type system to represent networks. This is not the most enthralling reading, but this pacge will walk you through the different options, and discuss how and when to use them.","category":"page"},{"location":"interface/types/#Network-representation","page":"Types","title":"Network representation","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"All networks types have a field edges to store the sparse adjacency matrix, and fields S, or T and B, for species in unipartite and bipartite networks respectively. edges is always a two-dimensional array (see below for more information), where interactions go from the rows, to the columns. Network types are mutable. Operations that will modify the network end with a !, as is the julian convention.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"Fields S, T, and B are one-dimensional arrays of AllowedSpeciesTypes – they currently can be String or Symbol, and represent the species/nodes names. Future allowed types will be added in later releases.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"You should never have to manipulate the network by calling its fields directly. The species function will give you access to the species, and the network slicing operations (see later sections) will let you access subset of the network / individual interactions / set of neighbours.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"Network types are iterable: this is equivalent to calling the interactions function on a network. On small networks, interactions is faster (but allocates the whole memory at once). On large networks, it can be less true, and using the iteration approach can save some time. The iteration protocol is the same as for all other Julia collections:","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"for (int_number, interaction) in N\n  @info \"Interaction $(int_number) -- $(interaction)\"\nend","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"The objects returned by the iteration protocol are named tuples with fields to and from (always), and can have additional fields probability and strength.","category":"page"},{"location":"interface/types/#Partiteness","page":"Types","title":"Partiteness","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"In unipartite networks, the adjacency matrix edges is square, and has as many rows/columns as there are elements in S. This is always checked and enforced upon construction of the object, so you cannot have a mismatch.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"In bipartite networks, the matrix edges is not necessarily square, and has dimensions equal to the lengths of T (rows) and B (columns). This too is checked upon construction.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"All elements in S must be unique (no duplicate node names). In addition, all names in the union of T and B must be unique too (so that when a bipartite network is cast to a unipartite one, the constraint on unique names in S is respected). These constraints are enforced when constructing the object, and will return explicit error messages if not met.","category":"page"},{"location":"interface/types/#Type-of-information","page":"Types","title":"Type of information","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"At all points, you can have a look at the types of the interactions and the species objects – the next entries in this documentation give additional information about the types allowed.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"eltype","category":"page"},{"location":"interface/types/#Union-types","page":"Types","title":"Union types","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"All networks are grouped upon the AbstractEcologicalNetwork type:","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"AbstractEcologicalNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.AbstractEcologicalNetwork","page":"Types","title":"EcologicalNetworks.AbstractEcologicalNetwork","text":"All networks in the package belong to the AbstractEcologicalNetwork type. They all have a field A to represent interactions as a matrix, and a number of fields for species. See the documentation for AbstractBipartiteNetwork and AbstractUnipartiteNetwork, as well as AllowedSpeciesTypes for the allowed types for species.\n\nNote that all species in a network (including both levels of a bipartite network) must have the same type. For example, [\"a\", :b, \"c\"] is not a valid array of species, as not all its elements have the same type.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/","page":"Types","title":"Types","text":"The type of nodes that are allowed is determined by the non-exported EcologicalNetworks._check_species_validity function. To allow an additional type of node, you can write the following:","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"\nstruct Foo\n  name::AbstractString\n  bar::AbstractFloat\nend\n\nimport EcologicalNetworks\nfunction EcologicalNetworks._check_species_validity(::Type{Foo})\nend","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"Note that integers are never valid species identifiers. By default, String and Symbol are used. The function _check_species_validity should do nothing for an accepted type (and it will throw an error for any other type).","category":"page"},{"location":"interface/types/#By-partiteness","page":"Types","title":"By partiteness","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"AbstractBipartiteNetwork\nAbstractUnipartiteNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.AbstractBipartiteNetwork","page":"Types","title":"EcologicalNetworks.AbstractBipartiteNetwork","text":"This abstract type groups all bipartite networks, regardless of the type of information. Bipartite networks have two fields for species, named T (for top, corresponding to matrix rows), and B (for bottom, matrix columns).\n\nAny bipartite network can be declared (we'll use the example of a binary network) either using BipartiteNetwork(A, T, B) (assuming A is a matrix of interactions and T and B are vectors of species names for the top and bottom level), or BipartiteNetwork(A), in which case the species will be named automatically.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.AbstractUnipartiteNetwork","page":"Types","title":"EcologicalNetworks.AbstractUnipartiteNetwork","text":"This abstract type groups all unipartite networks, regardless of the type of information. Unipartite networks have a single field for species, named S, which has the same number of elements as the size of the matrix.\n\nAny unipartite network can be declared (we'll use the example of a binary network) either using UnipartiteNetwork(A, S) (assuming A is a matrix of interactions and S is a vector of species names), or UnipartiteNetwork(A), in which case the species will be named automatically.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#By-interaction-type","page":"Types","title":"By interaction type","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"BinaryNetwork\nQuantitativeNetwork\nProbabilisticNetwork\nDeterministicNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.BinaryNetwork","page":"Types","title":"EcologicalNetworks.BinaryNetwork","text":"This is a union type for both Bipartite and Unipartite deterministic networks. All networks from these class have adjacency matrices represented as arrays of Boolean values.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.QuantitativeNetwork","page":"Types","title":"EcologicalNetworks.QuantitativeNetwork","text":"This is a union type for both unipartite and bipartite quantitative networks. All networks of this type have adjancency matrices as two-dimensional arrays of numbers.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.ProbabilisticNetwork","page":"Types","title":"EcologicalNetworks.ProbabilisticNetwork","text":"This is a union type for both Bipartite and Unipartite probabilistic networks. Probabilistic networks are represented as arrays of floating point values ∈ [0;1].\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.DeterministicNetwork","page":"Types","title":"EcologicalNetworks.DeterministicNetwork","text":"All non-probabilistic networks\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#List-of-available-types","page":"Types","title":"List of available types","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"These are the types that you actually declare and use. They are presented last because it is easier to understand what they are when you get a sense for the different union types.","category":"page"},{"location":"interface/types/","page":"Types","title":"Types","text":"UnipartiteNetwork\nBipartiteNetwork\nUnipartiteQuantitativeNetwork\nBipartiteQuantitativeNetwork\nUnipartiteProbabilisticNetwork\nBipartiteProbabilisticNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.UnipartiteNetwork","page":"Types","title":"EcologicalNetworks.UnipartiteNetwork","text":"An unipartite deterministic network is a matrix of boolean values.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.BipartiteNetwork","page":"Types","title":"EcologicalNetworks.BipartiteNetwork","text":"A bipartite deterministic network is a matrix of boolean values.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.UnipartiteQuantitativeNetwork","page":"Types","title":"EcologicalNetworks.UnipartiteQuantitativeNetwork","text":"A unipartite quantitative network is a square matrix of numbers.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.BipartiteQuantitativeNetwork","page":"Types","title":"EcologicalNetworks.BipartiteQuantitativeNetwork","text":"A bipartite quantitative network is matrix of numbers. It is assumed that the interaction strength are positive.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.UnipartiteProbabilisticNetwork","page":"Types","title":"EcologicalNetworks.UnipartiteProbabilisticNetwork","text":"A unipartite probabilistic network is a square matrix of floating point numbers, all of which must be between 0 and 1.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.BipartiteProbabilisticNetwork","page":"Types","title":"EcologicalNetworks.BipartiteProbabilisticNetwork","text":"A bipartite probabilistic network is a matrix of floating point numbers, all of which must be between 0 and 1.\n\n\n\n\n\n","category":"type"}]
}
